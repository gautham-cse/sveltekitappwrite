import type { CorbadoApp, GeneralBlockLoginInit, ProcessCommon } from '@corbado/web-core';
import type { SocialProviderType } from '@corbado/web-core/dist/api/v2';
import { BlockTypes, ScreenNames } from '../constants';
import type { ErrorTranslator } from '../errorTranslator';
import type { ProcessHandler } from '../processHandler';
import type { BlockDataLoginInit } from '../types';
import { Block } from './Block';
export declare class LoginInitBlock extends Block<BlockDataLoginInit> {
    #private;
    readonly data: BlockDataLoginInit;
    readonly type = BlockTypes.LoginInit;
    readonly authType: "login";
    readonly initialScreen = ScreenNames.LoginInit;
    constructor(app: CorbadoApp, flowHandler: ProcessHandler, common: ProcessCommon, errorTranslator: ErrorTranslator, data: GeneralBlockLoginInit);
    start(loginIdentifier: string, isPhone: boolean): Promise<void>;
    switchToSignup(): void;
    isSignupEnabled(): boolean;
    startConditionalUIOnPageLoad(): Promise<boolean>;
    startConditionalUIOnFirstUserInteraction(): Promise<boolean>;
    continueWithConditionalUI(): Promise<void>;
    startSocialVerify(providerType: SocialProviderType): Promise<void>;
    finishSocialVerify(abortController: AbortController): Promise<void>;
    discardOfferedLastIdentifier(): void;
}
