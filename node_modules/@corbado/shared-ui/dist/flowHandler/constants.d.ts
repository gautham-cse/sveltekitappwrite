import type { LoginIdentifierType as ApiLoginIdentifierType } from '@corbado/web-core';
export declare enum AuthType {
    SignUp = "signup",
    Login = "login"
}
export declare enum LoginIdentifierType {
    Email = "email",
    Phone = "phone",
    Username = "username"
}
export declare const createLoginIdentifierType: (v: ApiLoginIdentifierType) => LoginIdentifierType;
export declare enum SignUpFlowNames {
    PasskeySignupWithFallback = "PasskeySignupWithFallback",
    SignupWithPasskeyAppend = "SignupWithPasskeyAppend"
}
export declare enum LoginFlowNames {
    PasskeyLoginWithFallback = "PasskeyLoginWithFallback"
}
export declare enum ScreenNames {
    SignupInit = "signup-init",
    LoginInit = "login-init",
    End = "end",
    EmailOtpVerification = "email-otp-verification",
    EmailLinkSent = "email-link-sent",
    PhoneOtp = "phone-otp",
    EmailLinkVerification = "email-link-verification",
    SocialVerify = "social-verify",
    MissingFields = "missing-fields",
    PasskeyError = "passkey-error",
    PasskeyErrorLight = "passkey-error-light",
    PasskeyAppend = "passkey-append",
    PasskeyAppendAfterHybrid = "passkey-append-after-hybrid",
    PasskeySuccess = "passkey-success",
    PasskeyBackground = "passkey-background",
    PasskeyHybrid = "passkey-hybrid",
    EditUserData = "edit-user-data",
    EditEmail = "edit-email",
    EditPhone = "edit-phone",
    ContinueOnOtherEnv = "continue-on-other-device"
}
export declare enum BlockTypes {
    LoginInit = "login-init",
    SignupInit = "signup-init",
    EmailVerify = "email-verify",
    PhoneVerify = "phone-verify",
    MissingFields = "missing-fields",
    PasskeyAppend = "passkey-append",
    PasskeyVerify = "passkey-verify",
    PasskeyAppended = "passkey-appended",
    PasskeyAppendAfterHybrid = "passkey-append-after-hybrid",
    Completed = "completed",
    ContinueOnOtherEnv = "continue-on-other-env"
}
export declare enum InitState {
    Initializing = 0,// the component is currently loading (we need to retrieve configuration from the backend first before we can render most parts of the component)
    Failed = 1,// we were not able to retrieve the config from the backend => we can not render the component
    Success = 2
}
export declare enum ContinueOnOtherEnvReasons {
    EmailLinkVerified = "email-link-verified",
    ProcessAlreadyCompleted = "process-already-completed"
}
export declare const initScreenBlocks: BlockTypes[];
