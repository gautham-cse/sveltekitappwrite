import type { CorbadoUser, PassKeyList, SessionUser } from '@corbado/types';
import type { AxiosResponse } from 'axios';
import { BehaviorSubject } from 'rxjs';
import { Result } from 'ts-results';
import { ShortSession } from '../models/session';
import { AuthState, CorbadoError, type PasskeyDeleteError } from '../utils';
/**
 * The SessionService manages user sessions for the Corbado Application, handling shortSession and longSession.
 * It offers methods to set, delete, and retrieve these tokens and the username,
 * as well as a method to fetch the full user object from the Corbado API.
 *
 * The longSession should not be exposed from this service as it is only used for session refresh.
 */
export declare class SessionService {
    #private;
    constructor(projectId: string, setShortSessionCookie: boolean, isPreviewMode: boolean, frontendApiUrlSuffix: string);
    /**
     * Initializes the SessionService by registering a callback that is called when the shortSession changes.
     */
    init(): Promise<CorbadoError | null>;
    /**
     * Getter method for retrieving the short term session token.
     * @returns The short term session token or null if it's not set.
     */
    get shortSession(): ShortSession | undefined;
    /**
     * Getter method for retrieving the username.
     * @returns The username or null if it's not set.
     */
    getUser(): SessionUser | undefined;
    /**
     * Exposes changes to the user object
     */
    get userChanges(): BehaviorSubject<SessionUser | undefined>;
    /**
     * Exposes changes to the shortSession
     */
    get shortSessionChanges(): BehaviorSubject<string | undefined>;
    /**
     * Exposes changes to the auth state
     */
    get authStateChanges(): BehaviorSubject<AuthState>;
    dispose(): void;
    getFullUser(abortController: AbortController): Promise<Result<CorbadoUser, CorbadoError>>;
    appendPasskey(): Promise<Result<void, CorbadoError | undefined>>;
    passkeyList(abortController: AbortController): Promise<Result<PassKeyList, CorbadoError>>;
    passkeyDelete(id: string): Promise<Result<void, PasskeyDeleteError>>;
    logout(): Promise<void>;
    /** Method to set Session
     * It sets the short term session token, long term session token, and username for the Corbado Application.
     * @param shortSessionValue The short term session token to be set.
     * @param longSession The long term session token to be set.
     */
    setSession(shortSessionValue: string, longSession: string | undefined): void;
    /**
     * Method to delete Session.
     * It deletes the short term session token, long term session token, and username for the Corbado Application.
     */
    clear(): void;
    wrapWithErr<T>(callback: () => Promise<AxiosResponse<T>>): Promise<Result<T, CorbadoError>>;
}
