import type { Result } from 'ts-results';
import type { JavaScriptHighEntropy } from '../api/v2';
import { CorbadoError } from '../utils';
/**
 * AuthenticatorService handles all interactions with webAuthn platform authenticators.
 * Currently, this includes the creation of passkeys and the login with existing passkeys.
 */
export declare class WebAuthnService {
    #private;
    createPasskey(serializedChallenge: string): Promise<Result<string, CorbadoError>>;
    login(serializedChallenge: string, conditional: boolean, skipIfOnlyHybrid?: boolean): Promise<Result<string, CorbadoError>>;
    static doesBrowserSupportPasskeys(): Promise<boolean>;
    static doesBrowserSupportConditionalUI(): Promise<boolean>;
    static canUseBluetooth(): Promise<boolean>;
    static getClientHandle(): string | null;
    static getHighEntropyValues(): Promise<JavaScriptHighEntropy | undefined>;
    static setClientHandle(clientHandle: string): void;
    abortOngoingOperation(): AbortController;
}
