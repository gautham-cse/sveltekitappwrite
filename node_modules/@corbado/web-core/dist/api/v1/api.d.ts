/**
 * Corbado Frontend API
 * Overview of all Corbado Frontend API calls to implement passwordless authentication.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AppleAppSiteAssociationRsp
 */
export interface AppleAppSiteAssociationRsp {
    /**
     *
     * @type {AppleAppSiteAssociationRspApplinks}
     * @memberof AppleAppSiteAssociationRsp
     */
    'applinks': AppleAppSiteAssociationRspApplinks;
    /**
     *
     * @type {AppleAppSiteAssociationRspWebcredentials}
     * @memberof AppleAppSiteAssociationRsp
     */
    'webcredentials': AppleAppSiteAssociationRspWebcredentials;
    /**
     *
     * @type {AppleAppSiteAssociationRspWebcredentials}
     * @memberof AppleAppSiteAssociationRsp
     */
    'appclips': AppleAppSiteAssociationRspWebcredentials;
}
/**
 *
 * @export
 * @interface AppleAppSiteAssociationRspApplinks
 */
export interface AppleAppSiteAssociationRspApplinks {
    /**
     *
     * @type {Array<AppleAppSiteAssociationRspApplinksDetailsInner>}
     * @memberof AppleAppSiteAssociationRspApplinks
     */
    'details': Array<AppleAppSiteAssociationRspApplinksDetailsInner>;
}
/**
 *
 * @export
 * @interface AppleAppSiteAssociationRspApplinksDetailsInner
 */
export interface AppleAppSiteAssociationRspApplinksDetailsInner {
    /**
     *
     * @type {string}
     * @memberof AppleAppSiteAssociationRspApplinksDetailsInner
     */
    'appID': string;
    /**
     *
     * @type {Array<string>}
     * @memberof AppleAppSiteAssociationRspApplinksDetailsInner
     */
    'paths': Array<string>;
}
/**
 *
 * @export
 * @interface AppleAppSiteAssociationRspWebcredentials
 */
export interface AppleAppSiteAssociationRspWebcredentials {
    /**
     *
     * @type {Array<string>}
     * @memberof AppleAppSiteAssociationRspWebcredentials
     */
    'apps': Array<string>;
}
/**
 *
 * @export
 * @interface AssetLink
 */
export interface AssetLink {
    /**
     *
     * @type {Array<string>}
     * @memberof AssetLink
     */
    'relation': Array<string>;
    /**
     *
     * @type {AssetLinkTarget}
     * @memberof AssetLink
     */
    'target': AssetLinkTarget;
}
/**
 *
 * @export
 * @interface AssetLinkTarget
 */
export interface AssetLinkTarget {
    /**
     *
     * @type {string}
     * @memberof AssetLinkTarget
     */
    'namespace': string;
    /**
     *
     * @type {string}
     * @memberof AssetLinkTarget
     */
    'package_name'?: string;
    /**
     *
     * @type {string}
     * @memberof AssetLinkTarget
     */
    'site'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof AssetLinkTarget
     */
    'sha256_cert_fingerprints'?: Array<string>;
}
/**
 * Authentication methods
 * @export
 * @enum {string}
 */
export declare const AuthMethod: {
    readonly Email: "email";
    readonly PhoneNumber: "phone_number";
    readonly Webauthn: "webauthn";
    readonly Password: "password";
};
export type AuthMethod = typeof AuthMethod[keyof typeof AuthMethod];
/**
 *
 * @export
 * @interface AuthMethodsListReq
 */
export interface AuthMethodsListReq {
    /**
     * Users login name
     * @type {string}
     * @memberof AuthMethodsListReq
     */
    'username': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof AuthMethodsListReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface AuthMethodsListRsp
 */
export interface AuthMethodsListRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof AuthMethodsListRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof AuthMethodsListRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof AuthMethodsListRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof AuthMethodsListRsp
     */
    'runtime': number;
    /**
     *
     * @type {AuthMethodsListRspAllOfData}
     * @memberof AuthMethodsListRsp
     */
    'data': AuthMethodsListRspAllOfData;
}
/**
 *
 * @export
 * @interface AuthMethodsListRspAllOfData
 */
export interface AuthMethodsListRspAllOfData {
    /**
     *
     * @type {Array<AuthMethod>}
     * @memberof AuthMethodsListRspAllOfData
     */
    'selectedMethods': Array<AuthMethod>;
    /**
     *
     * @type {Array<AuthMethod>}
     * @memberof AuthMethodsListRspAllOfData
     */
    'possibleMethods': Array<AuthMethod>;
}
/**
 *
 * @export
 * @interface AuthenticationRsp
 */
export interface AuthenticationRsp {
    /**
     *
     * @type {string}
     * @memberof AuthenticationRsp
     */
    'redirectURL': string;
    /**
     * Only given when using session v1
     * @type {string}
     * @memberof AuthenticationRsp
     */
    'sessionToken'?: string;
    /**
     * Only given when project environment is dev
     * @type {string}
     * @memberof AuthenticationRsp
     */
    'longSession'?: string;
    /**
     *
     * @type {ShortSession}
     * @memberof AuthenticationRsp
     */
    'shortSession'?: ShortSession;
    /**
     *
     * @type {Array<AuthMethod>}
     * @memberof AuthenticationRsp
     */
    'authMethods': Array<AuthMethod>;
}
/**
 *
 * @export
 * @interface EmailCodeConfirmReq
 */
export interface EmailCodeConfirmReq {
    /**
     *
     * @type {string}
     * @memberof EmailCodeConfirmReq
     */
    'emailCodeID': string;
    /**
     *
     * @type {string}
     * @memberof EmailCodeConfirmReq
     */
    'code': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof EmailCodeConfirmReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface EmailCodeConfirmRsp
 */
export interface EmailCodeConfirmRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof EmailCodeConfirmRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof EmailCodeConfirmRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof EmailCodeConfirmRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof EmailCodeConfirmRsp
     */
    'runtime': number;
    /**
     *
     * @type {EmailLinkConfirmRspAllOfData}
     * @memberof EmailCodeConfirmRsp
     */
    'data': EmailLinkConfirmRspAllOfData;
}
/**
 *
 * @export
 * @interface EmailCodeLoginStartReq
 */
export interface EmailCodeLoginStartReq {
    /**
     *
     * @type {string}
     * @memberof EmailCodeLoginStartReq
     */
    'username': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof EmailCodeLoginStartReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface EmailCodeLoginStartRsp
 */
export interface EmailCodeLoginStartRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof EmailCodeLoginStartRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof EmailCodeLoginStartRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof EmailCodeLoginStartRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof EmailCodeLoginStartRsp
     */
    'runtime': number;
    /**
     *
     * @type {EmailCodeRegisterStartRspAllOfData}
     * @memberof EmailCodeLoginStartRsp
     */
    'data': EmailCodeRegisterStartRspAllOfData;
}
/**
 *
 * @export
 * @interface EmailCodeRegisterStartReq
 */
export interface EmailCodeRegisterStartReq {
    /**
     *
     * @type {string}
     * @memberof EmailCodeRegisterStartReq
     */
    'username'?: string;
    /**
     *
     * @type {string}
     * @memberof EmailCodeRegisterStartReq
     */
    'email': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof EmailCodeRegisterStartReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface EmailCodeRegisterStartRsp
 */
export interface EmailCodeRegisterStartRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof EmailCodeRegisterStartRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof EmailCodeRegisterStartRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof EmailCodeRegisterStartRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof EmailCodeRegisterStartRsp
     */
    'runtime': number;
    /**
     *
     * @type {EmailCodeRegisterStartRspAllOfData}
     * @memberof EmailCodeRegisterStartRsp
     */
    'data': EmailCodeRegisterStartRspAllOfData;
}
/**
 *
 * @export
 * @interface EmailCodeRegisterStartRspAllOfData
 */
export interface EmailCodeRegisterStartRspAllOfData {
    /**
     *
     * @type {string}
     * @memberof EmailCodeRegisterStartRspAllOfData
     */
    'emailCodeID': string;
}
/**
 *
 * @export
 * @interface EmailCodeStatusReq
 */
export interface EmailCodeStatusReq {
    /**
     *
     * @type {string}
     * @memberof EmailCodeStatusReq
     */
    'emailCodeID': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof EmailCodeStatusReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface EmailCodeStatusRsp
 */
export interface EmailCodeStatusRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof EmailCodeStatusRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof EmailCodeStatusRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof EmailCodeStatusRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof EmailCodeStatusRsp
     */
    'runtime': number;
    /**
     *
     * @type {AuthenticationRsp}
     * @memberof EmailCodeStatusRsp
     */
    'data': AuthenticationRsp;
}
/**
 *
 * @export
 * @interface EmailLinkConfirmReq
 */
export interface EmailLinkConfirmReq {
    /**
     *
     * @type {string}
     * @memberof EmailLinkConfirmReq
     */
    'emailLinkID': string;
    /**
     *
     * @type {string}
     * @memberof EmailLinkConfirmReq
     */
    'token': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof EmailLinkConfirmReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface EmailLinkConfirmRsp
 */
export interface EmailLinkConfirmRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof EmailLinkConfirmRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof EmailLinkConfirmRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof EmailLinkConfirmRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof EmailLinkConfirmRsp
     */
    'runtime': number;
    /**
     *
     * @type {EmailLinkConfirmRspAllOfData}
     * @memberof EmailLinkConfirmRsp
     */
    'data': EmailLinkConfirmRspAllOfData;
}
/**
 *
 * @export
 * @interface EmailLinkConfirmRspAllOfData
 */
export interface EmailLinkConfirmRspAllOfData {
    /**
     *
     * @type {string}
     * @memberof EmailLinkConfirmRspAllOfData
     */
    'redirectURL': string;
    /**
     * Only given when using session v1
     * @type {string}
     * @memberof EmailLinkConfirmRspAllOfData
     */
    'sessionToken'?: string;
    /**
     * Only given when project environment is dev
     * @type {string}
     * @memberof EmailLinkConfirmRspAllOfData
     */
    'longSession'?: string;
    /**
     *
     * @type {ShortSession}
     * @memberof EmailLinkConfirmRspAllOfData
     */
    'shortSession'?: ShortSession;
    /**
     *
     * @type {Array<AuthMethod>}
     * @memberof EmailLinkConfirmRspAllOfData
     */
    'authMethods': Array<AuthMethod>;
}
/**
 *
 * @export
 * @interface EmailLinkLoginStartReq
 */
export interface EmailLinkLoginStartReq {
    /**
     *
     * @type {string}
     * @memberof EmailLinkLoginStartReq
     */
    'username': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof EmailLinkLoginStartReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface EmailLinkLoginStartRsp
 */
export interface EmailLinkLoginStartRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof EmailLinkLoginStartRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof EmailLinkLoginStartRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof EmailLinkLoginStartRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof EmailLinkLoginStartRsp
     */
    'runtime': number;
    /**
     *
     * @type {EmailLinkRegisterStartRspAllOfData}
     * @memberof EmailLinkLoginStartRsp
     */
    'data': EmailLinkRegisterStartRspAllOfData;
}
/**
 *
 * @export
 * @interface EmailLinkRegisterStartReq
 */
export interface EmailLinkRegisterStartReq {
    /**
     *
     * @type {string}
     * @memberof EmailLinkRegisterStartReq
     */
    'username'?: string;
    /**
     *
     * @type {string}
     * @memberof EmailLinkRegisterStartReq
     */
    'email': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof EmailLinkRegisterStartReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface EmailLinkRegisterStartRsp
 */
export interface EmailLinkRegisterStartRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof EmailLinkRegisterStartRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof EmailLinkRegisterStartRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof EmailLinkRegisterStartRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof EmailLinkRegisterStartRsp
     */
    'runtime': number;
    /**
     *
     * @type {EmailLinkRegisterStartRspAllOfData}
     * @memberof EmailLinkRegisterStartRsp
     */
    'data': EmailLinkRegisterStartRspAllOfData;
}
/**
 *
 * @export
 * @interface EmailLinkRegisterStartRspAllOfData
 */
export interface EmailLinkRegisterStartRspAllOfData {
    /**
     *
     * @type {string}
     * @memberof EmailLinkRegisterStartRspAllOfData
     */
    'emailLinkID': string;
}
/**
 *
 * @export
 * @interface EmailLinkStatusReq
 */
export interface EmailLinkStatusReq {
    /**
     *
     * @type {string}
     * @memberof EmailLinkStatusReq
     */
    'emailLinkID': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof EmailLinkStatusReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface EmailLinkStatusRsp
 */
export interface EmailLinkStatusRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof EmailLinkStatusRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof EmailLinkStatusRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof EmailLinkStatusRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof EmailLinkStatusRsp
     */
    'runtime': number;
    /**
     *
     * @type {AuthenticationRsp}
     * @memberof EmailLinkStatusRsp
     */
    'data': AuthenticationRsp;
}
/**
 *
 * @export
 * @interface EmptyReq
 */
export interface EmptyReq {
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof EmptyReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface ErrorRsp
 */
export interface ErrorRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof ErrorRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof ErrorRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof ErrorRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof ErrorRsp
     */
    'runtime': number;
    /**
     *
     * @type {ErrorRspAllOfError}
     * @memberof ErrorRsp
     */
    'error': ErrorRspAllOfError;
}
/**
 *
 * @export
 * @interface ErrorRspAllOfError
 */
export interface ErrorRspAllOfError {
    /**
     * Type of error
     * @type {string}
     * @memberof ErrorRspAllOfError
     */
    'type': string;
    /**
     * Details of error
     * @type {string}
     * @memberof ErrorRspAllOfError
     */
    'details'?: string;
    /**
     * Validation errors per field
     * @type {Array<ErrorRspAllOfErrorValidation>}
     * @memberof ErrorRspAllOfError
     */
    'validation'?: Array<ErrorRspAllOfErrorValidation>;
    /**
     * Additional links to help understand the error
     * @type {Array<string>}
     * @memberof ErrorRspAllOfError
     */
    'links': Array<string>;
}
/**
 *
 * @export
 * @interface ErrorRspAllOfErrorValidation
 */
export interface ErrorRspAllOfErrorValidation {
    /**
     *
     * @type {string}
     * @memberof ErrorRspAllOfErrorValidation
     */
    'field': string;
    /**
     *
     * @type {string}
     * @memberof ErrorRspAllOfErrorValidation
     */
    'message': string;
}
/**
 * User entry with emails and phone numbers
 * @export
 * @interface FullUser
 */
export interface FullUser {
    /**
     * ID of the user
     * @type {string}
     * @memberof FullUser
     */
    'ID': string;
    /**
     *
     * @type {string}
     * @memberof FullUser
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof FullUser
     */
    'fullName': string;
    /**
     * Timestamp of when the entity was created in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof FullUser
     */
    'created': string;
    /**
     * Timestamp of when the entity was last updated in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof FullUser
     */
    'updated': string;
    /**
     *
     * @type {Status}
     * @memberof FullUser
     */
    'status': Status;
    /**
     *
     * @type {Array<UserEmail>}
     * @memberof FullUser
     */
    'emails': Array<UserEmail>;
    /**
     *
     * @type {Array<UserPhoneNumber>}
     * @memberof FullUser
     */
    'phoneNumbers': Array<UserPhoneNumber>;
}
/**
 *
 * @export
 * @interface GenericRsp
 */
export interface GenericRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof GenericRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof GenericRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof GenericRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof GenericRsp
     */
    'runtime': number;
}
/**
 * JSON Web Key
 * @export
 * @interface Jwk
 */
export interface Jwk {
    /**
     * The specific cryptographic algorithm used with the key
     * @type {string}
     * @memberof Jwk
     */
    'alg': string;
    /**
     * The family of cryptographic algorithms used with the key
     * @type {string}
     * @memberof Jwk
     */
    'kty': string;
    /**
     * How the key was meant to be used; sig represents the signature
     * @type {string}
     * @memberof Jwk
     */
    'use': string;
    /**
     * The modulus for the RSA public key
     * @type {string}
     * @memberof Jwk
     */
    'n': string;
    /**
     * The exponent for the RSA public key
     * @type {string}
     * @memberof Jwk
     */
    'e': string;
    /**
     * The unique identifier for the key
     * @type {string}
     * @memberof Jwk
     */
    'kid': string;
}
/**
 * Login Identifier type
 * @export
 * @enum {string}
 */
export declare const LoginIdentifierType: {
    readonly Email: "email";
    readonly PhoneNumber: "phone_number";
    readonly Custom: "custom";
};
export type LoginIdentifierType = typeof LoginIdentifierType[keyof typeof LoginIdentifierType];
/**
 *
 * @export
 * @interface LoginTokenReq
 */
export interface LoginTokenReq {
    /**
     *
     * @type {string}
     * @memberof LoginTokenReq
     */
    'token': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof LoginTokenReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface LoginTokenRsp
 */
export interface LoginTokenRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof LoginTokenRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof LoginTokenRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof LoginTokenRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof LoginTokenRsp
     */
    'runtime': number;
    /**
     *
     * @type {AuthenticationRsp}
     * @memberof LoginTokenRsp
     */
    'data': AuthenticationRsp;
}
/**
 *
 * @export
 * @interface LogoutRsp
 */
export interface LogoutRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof LogoutRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof LogoutRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof LogoutRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof LogoutRsp
     */
    'runtime': number;
    /**
     *
     * @type {ShortSession}
     * @memberof LogoutRsp
     */
    'shortSession'?: ShortSession;
}
/**
 *
 * @export
 * @interface MePassKeyRsp
 */
export interface MePassKeyRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof MePassKeyRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof MePassKeyRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof MePassKeyRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof MePassKeyRsp
     */
    'runtime': number;
    /**
     *
     * @type {PassKeyList}
     * @memberof MePassKeyRsp
     */
    'data': PassKeyList;
}
/**
 *
 * @export
 * @interface MeRsp
 */
export interface MeRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof MeRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof MeRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof MeRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof MeRsp
     */
    'runtime': number;
    /**
     *
     * @type {FullUser}
     * @memberof MeRsp
     */
    'data': FullUser;
}
/**
 *
 * @export
 * @interface Paging
 */
export interface Paging {
    /**
     * current page returned in response
     * @type {number}
     * @memberof Paging
     */
    'page': number;
    /**
     * total number of pages available
     * @type {number}
     * @memberof Paging
     */
    'totalPages': number;
    /**
     * total number of items available
     * @type {number}
     * @memberof Paging
     */
    'totalItems': number;
}
/**
 *
 * @export
 * @interface PassKeyAppendFinishRsp
 */
export interface PassKeyAppendFinishRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof PassKeyAppendFinishRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof PassKeyAppendFinishRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof PassKeyAppendFinishRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof PassKeyAppendFinishRsp
     */
    'runtime': number;
    /**
     *
     * @type {PassKeyAppendFinishRspAllOfData}
     * @memberof PassKeyAppendFinishRsp
     */
    'data': PassKeyAppendFinishRspAllOfData;
}
/**
 *
 * @export
 * @interface PassKeyAppendFinishRspAllOfData
 */
export interface PassKeyAppendFinishRspAllOfData {
    /**
     *
     * @type {string}
     * @memberof PassKeyAppendFinishRspAllOfData
     */
    'redirectURL': string;
}
/**
 *
 * @export
 * @interface PassKeyAssociateStartReq
 */
export interface PassKeyAssociateStartReq {
    /**
     *
     * @type {string}
     * @memberof PassKeyAssociateStartReq
     */
    'associationToken': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof PassKeyAssociateStartReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface PassKeyCredentialExistsReq
 */
export interface PassKeyCredentialExistsReq {
    /**
     *
     * @type {string}
     * @memberof PassKeyCredentialExistsReq
     */
    'loginIdentifier': string;
    /**
     *
     * @type {LoginIdentifierType}
     * @memberof PassKeyCredentialExistsReq
     */
    'loginIdentifierType': LoginIdentifierType;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof PassKeyCredentialExistsReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface PassKeyCredentialExistsRsp
 */
export interface PassKeyCredentialExistsRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof PassKeyCredentialExistsRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof PassKeyCredentialExistsRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof PassKeyCredentialExistsRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof PassKeyCredentialExistsRsp
     */
    'runtime': number;
    /**
     *
     * @type {boolean}
     * @memberof PassKeyCredentialExistsRsp
     */
    'exists': boolean;
}
/**
 *
 * @export
 * @interface PassKeyFinishReq
 */
export interface PassKeyFinishReq {
    /**
     *
     * @type {string}
     * @memberof PassKeyFinishReq
     */
    'signedChallenge': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof PassKeyFinishReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface PassKeyItem
 */
export interface PassKeyItem {
    /**
     *
     * @type {string}
     * @memberof PassKeyItem
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof PassKeyItem
     */
    'credentialHash': string;
    /**
     *
     * @type {string}
     * @memberof PassKeyItem
     */
    'aaguid': string;
    /**
     *
     * @type {string}
     * @memberof PassKeyItem
     */
    'userAgent': string;
    /**
     *
     * @type {string}
     * @memberof PassKeyItem
     */
    'attestationType': string;
    /**
     *
     * @type {Array<string>}
     * @memberof PassKeyItem
     */
    'transport': Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof PassKeyItem
     */
    'backupEligible': boolean;
    /**
     *
     * @type {boolean}
     * @memberof PassKeyItem
     */
    'backupState': boolean;
    /**
     * Timestamp of when the entity was last used in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof PassKeyItem
     */
    'lastUsed': string;
    /**
     * Status
     * @type {string}
     * @memberof PassKeyItem
     */
    'status': PassKeyItemStatusEnum;
    /**
     * Timestamp of when the entity was created in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof PassKeyItem
     */
    'created': string;
}
export declare const PassKeyItemStatusEnum: {
    readonly Pending: "pending";
    readonly Active: "active";
};
export type PassKeyItemStatusEnum = typeof PassKeyItemStatusEnum[keyof typeof PassKeyItemStatusEnum];
/**
 *
 * @export
 * @interface PassKeyList
 */
export interface PassKeyList {
    /**
     *
     * @type {Array<PassKeyItem>}
     * @memberof PassKeyList
     */
    'passkeys': Array<PassKeyItem>;
    /**
     *
     * @type {Paging}
     * @memberof PassKeyList
     */
    'paging'?: Paging;
}
/**
 *
 * @export
 * @interface PassKeyLoginFinishRsp
 */
export interface PassKeyLoginFinishRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof PassKeyLoginFinishRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof PassKeyLoginFinishRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof PassKeyLoginFinishRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof PassKeyLoginFinishRsp
     */
    'runtime': number;
    /**
     *
     * @type {PassKeyLoginFinishRspAllOfData}
     * @memberof PassKeyLoginFinishRsp
     */
    'data': PassKeyLoginFinishRspAllOfData;
}
/**
 *
 * @export
 * @interface PassKeyLoginFinishRspAllOfData
 */
export interface PassKeyLoginFinishRspAllOfData {
    /**
     *
     * @type {string}
     * @memberof PassKeyLoginFinishRspAllOfData
     */
    'redirectURL': string;
    /**
     * Only given when using session v1
     * @type {string}
     * @memberof PassKeyLoginFinishRspAllOfData
     */
    'sessionToken'?: string;
    /**
     * Only given when project environment is dev
     * @type {string}
     * @memberof PassKeyLoginFinishRspAllOfData
     */
    'longSession'?: string;
    /**
     *
     * @type {ShortSession}
     * @memberof PassKeyLoginFinishRspAllOfData
     */
    'shortSession'?: ShortSession;
    /**
     *
     * @type {Array<AuthMethod>}
     * @memberof PassKeyLoginFinishRspAllOfData
     */
    'authMethods': Array<AuthMethod>;
    /**
     *
     * @type {string}
     * @memberof PassKeyLoginFinishRspAllOfData
     */
    'username': string;
    /**
     *
     * @type {boolean}
     * @memberof PassKeyLoginFinishRspAllOfData
     */
    'confirmedCredential': boolean;
}
/**
 *
 * @export
 * @interface PassKeyLoginStartReq
 */
export interface PassKeyLoginStartReq {
    /**
     * Users login name
     * @type {string}
     * @memberof PassKeyLoginStartReq
     */
    'username': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof PassKeyLoginStartReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface PassKeyMediationStartReq
 */
export interface PassKeyMediationStartReq {
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof PassKeyMediationStartReq
     */
    'requestID'?: string;
    /**
     *
     * @type {string}
     * @memberof PassKeyMediationStartReq
     */
    'username'?: string;
}
/**
 *
 * @export
 * @interface PassKeyMediationStartRsp
 */
export interface PassKeyMediationStartRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof PassKeyMediationStartRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof PassKeyMediationStartRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof PassKeyMediationStartRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof PassKeyMediationStartRsp
     */
    'runtime': number;
    /**
     *
     * @type {PassKeyMediationStartRspAllOfData}
     * @memberof PassKeyMediationStartRsp
     */
    'data': PassKeyMediationStartRspAllOfData;
}
/**
 *
 * @export
 * @interface PassKeyMediationStartRspAllOfData
 */
export interface PassKeyMediationStartRspAllOfData {
    /**
     * Contains json payload data for start webauthn mediation challenge
     * @type {string}
     * @memberof PassKeyMediationStartRspAllOfData
     */
    'challenge': string;
}
/**
 *
 * @export
 * @interface PassKeyRegisterFinishRsp
 */
export interface PassKeyRegisterFinishRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof PassKeyRegisterFinishRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof PassKeyRegisterFinishRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof PassKeyRegisterFinishRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof PassKeyRegisterFinishRsp
     */
    'runtime': number;
    /**
     *
     * @type {AuthenticationRsp}
     * @memberof PassKeyRegisterFinishRsp
     */
    'data': AuthenticationRsp;
}
/**
 *
 * @export
 * @interface PassKeyRegisterStartReq
 */
export interface PassKeyRegisterStartReq {
    /**
     * Users login name
     * @type {string}
     * @memberof PassKeyRegisterStartReq
     */
    'username': string;
    /**
     * Users full name
     * @type {string}
     * @memberof PassKeyRegisterStartReq
     */
    'fullName'?: string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof PassKeyRegisterStartReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface PassKeyStartRsp
 */
export interface PassKeyStartRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof PassKeyStartRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof PassKeyStartRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof PassKeyStartRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof PassKeyStartRsp
     */
    'runtime': number;
    /**
     *
     * @type {PassKeyStartRspAllOfData}
     * @memberof PassKeyStartRsp
     */
    'data': PassKeyStartRspAllOfData;
}
/**
 *
 * @export
 * @interface PassKeyStartRspAllOfData
 */
export interface PassKeyStartRspAllOfData {
    /**
     * Contains json payload data for start webauthn login challenge
     * @type {string}
     * @memberof PassKeyStartRspAllOfData
     */
    'challenge': string;
}
/**
 *
 * @export
 * @interface PasswordVerifyReq
 */
export interface PasswordVerifyReq {
    /**
     *
     * @type {string}
     * @memberof PasswordVerifyReq
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof PasswordVerifyReq
     */
    'password': string;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof PasswordVerifyReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface PasswordVerifyRsp
 */
export interface PasswordVerifyRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof PasswordVerifyRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof PasswordVerifyRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof PasswordVerifyRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof PasswordVerifyRsp
     */
    'runtime': number;
    /**
     *
     * @type {AuthenticationRsp}
     * @memberof PasswordVerifyRsp
     */
    'data': AuthenticationRsp;
}
/**
 *
 * @export
 * @interface ProjectConfigRsp
 */
export interface ProjectConfigRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof ProjectConfigRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof ProjectConfigRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof ProjectConfigRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof ProjectConfigRsp
     */
    'runtime': number;
    /**
     *
     * @type {ProjectConfigRspAllOfData}
     * @memberof ProjectConfigRsp
     */
    'data': ProjectConfigRspAllOfData;
}
/**
 *
 * @export
 * @interface ProjectConfigRspAllOfData
 */
export interface ProjectConfigRspAllOfData {
    /**
     *
     * @type {boolean}
     * @memberof ProjectConfigRspAllOfData
     */
    'allowUserRegistration': boolean;
    /**
     *
     * @type {string}
     * @memberof ProjectConfigRspAllOfData
     */
    'passkeyAppendInterval': string;
    /**
     *
     * @type {string}
     * @memberof ProjectConfigRspAllOfData
     */
    'fallbackLanguage': string;
    /**
     *
     * @type {boolean}
     * @memberof ProjectConfigRspAllOfData
     */
    'autoDetectLanguage': boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProjectConfigRspAllOfData
     */
    'userFullNameRequired': boolean;
    /**
     *
     * @type {boolean}
     * @memberof ProjectConfigRspAllOfData
     */
    'webComponentDebug': boolean;
    /**
     *
     * @type {string}
     * @memberof ProjectConfigRspAllOfData
     */
    'environment': string;
    /**
     *
     * @type {string}
     * @memberof ProjectConfigRspAllOfData
     */
    'signupFlow': string;
    /**
     *
     * @type {object}
     * @memberof ProjectConfigRspAllOfData
     */
    'signupFlowOptions': object;
    /**
     *
     * @type {string}
     * @memberof ProjectConfigRspAllOfData
     */
    'loginFlow': string;
    /**
     *
     * @type {object}
     * @memberof ProjectConfigRspAllOfData
     */
    'loginFlowOptions': object;
}
/**
 * Data about the request itself, can be used for debugging
 * @export
 * @interface RequestData
 */
export interface RequestData {
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof RequestData
     */
    'requestID': string;
    /**
     * Link to dashboard with details about request
     * @type {string}
     * @memberof RequestData
     */
    'link': string;
}
/**
 *
 * @export
 * @interface SessionRefreshRsp
 */
export interface SessionRefreshRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof SessionRefreshRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof SessionRefreshRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof SessionRefreshRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof SessionRefreshRsp
     */
    'runtime': number;
    /**
     *
     * @type {string}
     * @memberof SessionRefreshRsp
     */
    'redirectURL': string;
    /**
     * Only given when using session v1
     * @type {string}
     * @memberof SessionRefreshRsp
     */
    'sessionToken'?: string;
    /**
     * Only given when project environment is dev
     * @type {string}
     * @memberof SessionRefreshRsp
     */
    'longSession'?: string;
    /**
     *
     * @type {ShortSession}
     * @memberof SessionRefreshRsp
     */
    'shortSession'?: ShortSession;
    /**
     *
     * @type {Array<AuthMethod>}
     * @memberof SessionRefreshRsp
     */
    'authMethods': Array<AuthMethod>;
}
/**
 *
 * @export
 * @interface ShortSession
 */
export interface ShortSession {
    /**
     *
     * @type {string}
     * @memberof ShortSession
     */
    'key': string;
    /**
     *
     * @type {string}
     * @memberof ShortSession
     */
    'value': string;
    /**
     *
     * @type {string}
     * @memberof ShortSession
     */
    'domain': string;
    /**
     *
     * @type {string}
     * @memberof ShortSession
     */
    'path': string;
    /**
     *
     * @type {boolean}
     * @memberof ShortSession
     */
    'secure': boolean;
    /**
     *
     * @type {string}
     * @memberof ShortSession
     */
    'expires': string;
    /**
     *
     * @type {string}
     * @memberof ShortSession
     */
    'sameSite': string;
}
/**
 * Generic status that can describe Corbado entities
 * @export
 * @enum {string}
 */
export declare const Status: {
    readonly Active: "active";
    readonly Pending: "pending";
    readonly Deleted: "deleted";
};
export type Status = typeof Status[keyof typeof Status];
/**
 * User\'s email
 * @export
 * @interface UserEmail
 */
export interface UserEmail {
    /**
     * generic ID
     * @type {string}
     * @memberof UserEmail
     */
    'ID': string;
    /**
     *
     * @type {string}
     * @memberof UserEmail
     */
    'email': string;
    /**
     * Timestamp of when the entity was created in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof UserEmail
     */
    'created': string;
    /**
     * Timestamp of when the entity was last updated in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof UserEmail
     */
    'updated': string;
    /**
     *
     * @type {Status}
     * @memberof UserEmail
     */
    'status': Status;
}
/**
 *
 * @export
 * @interface UserExistsReq
 */
export interface UserExistsReq {
    /**
     *
     * @type {string}
     * @memberof UserExistsReq
     */
    'loginIdentifier': string;
    /**
     *
     * @type {LoginIdentifierType}
     * @memberof UserExistsReq
     */
    'loginIdentifierType': LoginIdentifierType;
    /**
     * Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
     * @type {string}
     * @memberof UserExistsReq
     */
    'requestID'?: string;
}
/**
 *
 * @export
 * @interface UserExistsRsp
 */
export interface UserExistsRsp {
    /**
     * HTTP status code of operation
     * @type {number}
     * @memberof UserExistsRsp
     */
    'httpStatusCode': number;
    /**
     *
     * @type {string}
     * @memberof UserExistsRsp
     */
    'message': string;
    /**
     *
     * @type {RequestData}
     * @memberof UserExistsRsp
     */
    'requestData': RequestData;
    /**
     * Runtime in seconds for this request
     * @type {number}
     * @memberof UserExistsRsp
     */
    'runtime': number;
    /**
     *
     * @type {boolean}
     * @memberof UserExistsRsp
     */
    'exists': boolean;
}
/**
 * User\'s phone number
 * @export
 * @interface UserPhoneNumber
 */
export interface UserPhoneNumber {
    /**
     * generic ID
     * @type {string}
     * @memberof UserPhoneNumber
     */
    'ID': string;
    /**
     *
     * @type {string}
     * @memberof UserPhoneNumber
     */
    'phoneNumber': string;
    /**
     * Timestamp of when the entity was created in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof UserPhoneNumber
     */
    'created': string;
    /**
     * Timestamp of when the entity was last updated in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof UserPhoneNumber
     */
    'updated': string;
    /**
     *
     * @type {Status}
     * @memberof UserPhoneNumber
     */
    'status': Status;
}
/**
 *
 * @export
 * @interface WellKnownJWKSListRsp
 */
export interface WellKnownJWKSListRsp {
    /**
     *
     * @type {Array<Jwk>}
     * @memberof WellKnownJWKSListRsp
     */
    'keys': Array<Jwk>;
}
/**
 * AssetsApi - axios parameter creator
 * @export
 */
export declare const AssetsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Provides apple app site association
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appleAppSiteAssociation: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Provides asset links for android devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assetLinks: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AssetsApi - functional programming interface
 * @export
 */
export declare const AssetsApiFp: (configuration?: Configuration) => {
    /**
     * Provides apple app site association
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appleAppSiteAssociation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppleAppSiteAssociationRsp>>;
    /**
     * Provides asset links for android devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assetLinks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssetLink>>>;
};
/**
 * AssetsApi - factory interface
 * @export
 */
export declare const AssetsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Provides apple app site association
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appleAppSiteAssociation(options?: any): AxiosPromise<AppleAppSiteAssociationRsp>;
    /**
     * Provides asset links for android devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assetLinks(options?: any): AxiosPromise<Array<AssetLink>>;
};
/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export declare class AssetsApi extends BaseAPI {
    /**
     * Provides apple app site association
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    appleAppSiteAssociation(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AppleAppSiteAssociationRsp, any>>;
    /**
     * Provides asset links for android devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    assetLinks(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AssetLink[], any>>;
}
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export declare const ProjectsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get project configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectConfig: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProjectsApi - functional programming interface
 * @export
 */
export declare const ProjectsApiFp: (configuration?: Configuration) => {
    /**
     * Get project configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectConfig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectConfigRsp>>;
};
/**
 * ProjectsApi - factory interface
 * @export
 */
export declare const ProjectsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get project configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectConfig(options?: any): AxiosPromise<ProjectConfigRsp>;
};
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export declare class ProjectsApi extends BaseAPI {
    /**
     * Get project configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectConfig(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectConfigRsp, any>>;
}
/**
 * SessionsApi - axios parameter creator
 * @export
 */
export declare const SessionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Performs session logout
     * @param {EmptyReq} emptyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionLogout: (emptyReq: EmptyReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs session refresh
     * @param {EmptyReq} emptyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionRefresh: (emptyReq: EmptyReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves well-known JWKS for Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wellKnownJWKSList: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SessionsApi - functional programming interface
 * @export
 */
export declare const SessionsApiFp: (configuration?: Configuration) => {
    /**
     * Performs session logout
     * @param {EmptyReq} emptyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionLogout(emptyReq: EmptyReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutRsp>>;
    /**
     * Performs session refresh
     * @param {EmptyReq} emptyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionRefresh(emptyReq: EmptyReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionRefreshRsp>>;
    /**
     * Retrieves well-known JWKS for Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wellKnownJWKSList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WellKnownJWKSListRsp>>;
};
/**
 * SessionsApi - factory interface
 * @export
 */
export declare const SessionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Performs session logout
     * @param {EmptyReq} emptyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionLogout(emptyReq: EmptyReq, options?: any): AxiosPromise<LogoutRsp>;
    /**
     * Performs session refresh
     * @param {EmptyReq} emptyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sessionRefresh(emptyReq: EmptyReq, options?: any): AxiosPromise<SessionRefreshRsp>;
    /**
     * Retrieves well-known JWKS for Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    wellKnownJWKSList(options?: any): AxiosPromise<WellKnownJWKSListRsp>;
};
/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export declare class SessionsApi extends BaseAPI {
    /**
     * Performs session logout
     * @param {EmptyReq} emptyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    sessionLogout(emptyReq: EmptyReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LogoutRsp, any>>;
    /**
     * Performs session refresh
     * @param {EmptyReq} emptyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    sessionRefresh(emptyReq: EmptyReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SessionRefreshRsp, any>>;
    /**
     * Retrieves well-known JWKS for Project ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    wellKnownJWKSList(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<WellKnownJWKSListRsp, any>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Lists user\'s available authentication methods
     * @param {AuthMethodsListReq} authMethodsListReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authMethodsList: (authMethodsListReq: AuthMethodsListReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete current user\'s passkeys
     * @param {string} credentialID Credential ID from passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPassKeyDelete: (credentialID: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets current user\'s passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPassKeyGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs email OTP register confirm
     * @param {EmailCodeConfirmReq} emailCodeConfirmReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailCodeConfirm: (emailCodeConfirmReq: EmailCodeConfirmReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs email OTP login start
     * @param {EmailCodeLoginStartReq} emailCodeLoginStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailCodeLoginStart: (emailCodeLoginStartReq: EmailCodeLoginStartReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs email OTP register start
     * @param {EmailCodeRegisterStartReq} emailCodeRegisterStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailCodeRegisterStart: (emailCodeRegisterStartReq: EmailCodeRegisterStartReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs email OTP login status check
     * @param {EmailCodeStatusReq} emailCodeStatusReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailCodeStatus: (emailCodeStatusReq: EmailCodeStatusReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs email link register confirm
     * @param {EmailLinkConfirmReq} emailLinkConfirmReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailLinkConfirm: (emailLinkConfirmReq: EmailLinkConfirmReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs email link login start
     * @param {EmailLinkLoginStartReq} emailLinkLoginStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailLinkLoginStart: (emailLinkLoginStartReq: EmailLinkLoginStartReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs email link register start
     * @param {EmailLinkRegisterStartReq} emailLinkRegisterStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailLinkRegisterStart: (emailLinkRegisterStartReq: EmailLinkRegisterStartReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs email link login status check
     * @param {EmailLinkStatusReq} emailLinkStatusReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailLinkStatus: (emailLinkStatusReq: EmailLinkStatusReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs login for given token
     * @param {LoginTokenReq} loginTokenReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginToken: (loginTokenReq: LoginTokenReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs passkey append finish
     * @param {PassKeyFinishReq} passKeyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyAppendFinish: (passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs passkey append start
     * @param {EmptyReq} emptyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyAppendStart: (emptyReq: EmptyReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs passkey associate start
     * @param {PassKeyAssociateStartReq} passKeyAssociateStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyAssociateStart: (passKeyAssociateStartReq: PassKeyAssociateStartReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Checks if active passkey credential exists for provided user and device
     * @param {PassKeyCredentialExistsReq} passKeyCredentialExistsReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyCredentialExists: (passKeyCredentialExistsReq: PassKeyCredentialExistsReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs passkey login finish
     * @param {PassKeyFinishReq} passKeyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyLoginFinish: (passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs passkey login start
     * @param {PassKeyLoginStartReq} passKeyLoginStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyLoginStart: (passKeyLoginStartReq: PassKeyLoginStartReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs passkey mediation start
     * @param {PassKeyMediationStartReq} passKeyMediationStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyMediationStart: (passKeyMediationStartReq: PassKeyMediationStartReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs passkey register finish
     * @param {PassKeyFinishReq} passKeyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyRegisterFinish: (passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs passkey register start
     * @param {PassKeyRegisterStartReq} passKeyRegisterStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyRegisterStart: (passKeyRegisterStartReq: PassKeyRegisterStartReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs password verify
     * @param {PasswordVerifyReq} passwordVerifyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    password: (passwordVerifyReq: PasswordVerifyReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Checks if a confirmed user exists for provided login identifier
     * @param {UserExistsReq} userExistsReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userExists: (userExistsReq: UserExistsReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Lists user\'s available authentication methods
     * @param {AuthMethodsListReq} authMethodsListReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authMethodsList(authMethodsListReq: AuthMethodsListReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthMethodsListRsp>>;
    /**
     * Gets current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeRsp>>;
    /**
     * Delete current user\'s passkeys
     * @param {string} credentialID Credential ID from passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPassKeyDelete(credentialID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericRsp>>;
    /**
     * Gets current user\'s passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPassKeyGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MePassKeyRsp>>;
    /**
     * Performs email OTP register confirm
     * @param {EmailCodeConfirmReq} emailCodeConfirmReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailCodeConfirm(emailCodeConfirmReq: EmailCodeConfirmReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailCodeConfirmRsp>>;
    /**
     * Performs email OTP login start
     * @param {EmailCodeLoginStartReq} emailCodeLoginStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailCodeLoginStart(emailCodeLoginStartReq: EmailCodeLoginStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailCodeLoginStartRsp>>;
    /**
     * Performs email OTP register start
     * @param {EmailCodeRegisterStartReq} emailCodeRegisterStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailCodeRegisterStart(emailCodeRegisterStartReq: EmailCodeRegisterStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailCodeRegisterStartRsp>>;
    /**
     * Performs email OTP login status check
     * @param {EmailCodeStatusReq} emailCodeStatusReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailCodeStatus(emailCodeStatusReq: EmailCodeStatusReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailCodeStatusRsp>>;
    /**
     * Performs email link register confirm
     * @param {EmailLinkConfirmReq} emailLinkConfirmReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailLinkConfirm(emailLinkConfirmReq: EmailLinkConfirmReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailLinkConfirmRsp>>;
    /**
     * Performs email link login start
     * @param {EmailLinkLoginStartReq} emailLinkLoginStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailLinkLoginStart(emailLinkLoginStartReq: EmailLinkLoginStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailLinkLoginStartRsp>>;
    /**
     * Performs email link register start
     * @param {EmailLinkRegisterStartReq} emailLinkRegisterStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailLinkRegisterStart(emailLinkRegisterStartReq: EmailLinkRegisterStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailLinkRegisterStartRsp>>;
    /**
     * Performs email link login status check
     * @param {EmailLinkStatusReq} emailLinkStatusReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailLinkStatus(emailLinkStatusReq: EmailLinkStatusReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailLinkStatusRsp>>;
    /**
     * Performs login for given token
     * @param {LoginTokenReq} loginTokenReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginToken(loginTokenReq: LoginTokenReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginTokenRsp>>;
    /**
     * Performs passkey append finish
     * @param {PassKeyFinishReq} passKeyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyAppendFinish(passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyAppendFinishRsp>>;
    /**
     * Performs passkey append start
     * @param {EmptyReq} emptyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyAppendStart(emptyReq: EmptyReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyStartRsp>>;
    /**
     * Performs passkey associate start
     * @param {PassKeyAssociateStartReq} passKeyAssociateStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyAssociateStart(passKeyAssociateStartReq: PassKeyAssociateStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyStartRsp>>;
    /**
     * Checks if active passkey credential exists for provided user and device
     * @param {PassKeyCredentialExistsReq} passKeyCredentialExistsReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyCredentialExists(passKeyCredentialExistsReq: PassKeyCredentialExistsReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyCredentialExistsRsp>>;
    /**
     * Performs passkey login finish
     * @param {PassKeyFinishReq} passKeyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyLoginFinish(passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyLoginFinishRsp>>;
    /**
     * Performs passkey login start
     * @param {PassKeyLoginStartReq} passKeyLoginStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyLoginStart(passKeyLoginStartReq: PassKeyLoginStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyStartRsp>>;
    /**
     * Performs passkey mediation start
     * @param {PassKeyMediationStartReq} passKeyMediationStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyMediationStart(passKeyMediationStartReq: PassKeyMediationStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyMediationStartRsp>>;
    /**
     * Performs passkey register finish
     * @param {PassKeyFinishReq} passKeyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyRegisterFinish(passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyRegisterFinishRsp>>;
    /**
     * Performs passkey register start
     * @param {PassKeyRegisterStartReq} passKeyRegisterStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyRegisterStart(passKeyRegisterStartReq: PassKeyRegisterStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PassKeyStartRsp>>;
    /**
     * Performs password verify
     * @param {PasswordVerifyReq} passwordVerifyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    password(passwordVerifyReq: PasswordVerifyReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordVerifyRsp>>;
    /**
     * Checks if a confirmed user exists for provided login identifier
     * @param {UserExistsReq} userExistsReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userExists(userExistsReq: UserExistsReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserExistsRsp>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Lists user\'s available authentication methods
     * @param {AuthMethodsListReq} authMethodsListReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authMethodsList(authMethodsListReq: AuthMethodsListReq, options?: any): AxiosPromise<AuthMethodsListRsp>;
    /**
     * Gets current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserGet(options?: any): AxiosPromise<MeRsp>;
    /**
     * Delete current user\'s passkeys
     * @param {string} credentialID Credential ID from passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPassKeyDelete(credentialID: string, options?: any): AxiosPromise<GenericRsp>;
    /**
     * Gets current user\'s passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPassKeyGet(options?: any): AxiosPromise<MePassKeyRsp>;
    /**
     * Performs email OTP register confirm
     * @param {EmailCodeConfirmReq} emailCodeConfirmReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailCodeConfirm(emailCodeConfirmReq: EmailCodeConfirmReq, options?: any): AxiosPromise<EmailCodeConfirmRsp>;
    /**
     * Performs email OTP login start
     * @param {EmailCodeLoginStartReq} emailCodeLoginStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailCodeLoginStart(emailCodeLoginStartReq: EmailCodeLoginStartReq, options?: any): AxiosPromise<EmailCodeLoginStartRsp>;
    /**
     * Performs email OTP register start
     * @param {EmailCodeRegisterStartReq} emailCodeRegisterStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailCodeRegisterStart(emailCodeRegisterStartReq: EmailCodeRegisterStartReq, options?: any): AxiosPromise<EmailCodeRegisterStartRsp>;
    /**
     * Performs email OTP login status check
     * @param {EmailCodeStatusReq} emailCodeStatusReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailCodeStatus(emailCodeStatusReq: EmailCodeStatusReq, options?: any): AxiosPromise<EmailCodeStatusRsp>;
    /**
     * Performs email link register confirm
     * @param {EmailLinkConfirmReq} emailLinkConfirmReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailLinkConfirm(emailLinkConfirmReq: EmailLinkConfirmReq, options?: any): AxiosPromise<EmailLinkConfirmRsp>;
    /**
     * Performs email link login start
     * @param {EmailLinkLoginStartReq} emailLinkLoginStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailLinkLoginStart(emailLinkLoginStartReq: EmailLinkLoginStartReq, options?: any): AxiosPromise<EmailLinkLoginStartRsp>;
    /**
     * Performs email link register start
     * @param {EmailLinkRegisterStartReq} emailLinkRegisterStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailLinkRegisterStart(emailLinkRegisterStartReq: EmailLinkRegisterStartReq, options?: any): AxiosPromise<EmailLinkRegisterStartRsp>;
    /**
     * Performs email link login status check
     * @param {EmailLinkStatusReq} emailLinkStatusReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailLinkStatus(emailLinkStatusReq: EmailLinkStatusReq, options?: any): AxiosPromise<EmailLinkStatusRsp>;
    /**
     * Performs login for given token
     * @param {LoginTokenReq} loginTokenReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginToken(loginTokenReq: LoginTokenReq, options?: any): AxiosPromise<LoginTokenRsp>;
    /**
     * Performs passkey append finish
     * @param {PassKeyFinishReq} passKeyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyAppendFinish(passKeyFinishReq: PassKeyFinishReq, options?: any): AxiosPromise<PassKeyAppendFinishRsp>;
    /**
     * Performs passkey append start
     * @param {EmptyReq} emptyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyAppendStart(emptyReq: EmptyReq, options?: any): AxiosPromise<PassKeyStartRsp>;
    /**
     * Performs passkey associate start
     * @param {PassKeyAssociateStartReq} passKeyAssociateStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyAssociateStart(passKeyAssociateStartReq: PassKeyAssociateStartReq, options?: any): AxiosPromise<PassKeyStartRsp>;
    /**
     * Checks if active passkey credential exists for provided user and device
     * @param {PassKeyCredentialExistsReq} passKeyCredentialExistsReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyCredentialExists(passKeyCredentialExistsReq: PassKeyCredentialExistsReq, options?: any): AxiosPromise<PassKeyCredentialExistsRsp>;
    /**
     * Performs passkey login finish
     * @param {PassKeyFinishReq} passKeyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyLoginFinish(passKeyFinishReq: PassKeyFinishReq, options?: any): AxiosPromise<PassKeyLoginFinishRsp>;
    /**
     * Performs passkey login start
     * @param {PassKeyLoginStartReq} passKeyLoginStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyLoginStart(passKeyLoginStartReq: PassKeyLoginStartReq, options?: any): AxiosPromise<PassKeyStartRsp>;
    /**
     * Performs passkey mediation start
     * @param {PassKeyMediationStartReq} passKeyMediationStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyMediationStart(passKeyMediationStartReq: PassKeyMediationStartReq, options?: any): AxiosPromise<PassKeyMediationStartRsp>;
    /**
     * Performs passkey register finish
     * @param {PassKeyFinishReq} passKeyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyRegisterFinish(passKeyFinishReq: PassKeyFinishReq, options?: any): AxiosPromise<PassKeyRegisterFinishRsp>;
    /**
     * Performs passkey register start
     * @param {PassKeyRegisterStartReq} passKeyRegisterStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passKeyRegisterStart(passKeyRegisterStartReq: PassKeyRegisterStartReq, options?: any): AxiosPromise<PassKeyStartRsp>;
    /**
     * Performs password verify
     * @param {PasswordVerifyReq} passwordVerifyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    password(passwordVerifyReq: PasswordVerifyReq, options?: any): AxiosPromise<PasswordVerifyRsp>;
    /**
     * Checks if a confirmed user exists for provided login identifier
     * @param {UserExistsReq} userExistsReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userExists(userExistsReq: UserExistsReq, options?: any): AxiosPromise<UserExistsRsp>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Lists user\'s available authentication methods
     * @param {AuthMethodsListReq} authMethodsListReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    authMethodsList(authMethodsListReq: AuthMethodsListReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthMethodsListRsp, any>>;
    /**
     * Gets current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    currentUserGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeRsp, any>>;
    /**
     * Delete current user\'s passkeys
     * @param {string} credentialID Credential ID from passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    currentUserPassKeyDelete(credentialID: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GenericRsp, any>>;
    /**
     * Gets current user\'s passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    currentUserPassKeyGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MePassKeyRsp, any>>;
    /**
     * Performs email OTP register confirm
     * @param {EmailCodeConfirmReq} emailCodeConfirmReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    emailCodeConfirm(emailCodeConfirmReq: EmailCodeConfirmReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailCodeConfirmRsp, any>>;
    /**
     * Performs email OTP login start
     * @param {EmailCodeLoginStartReq} emailCodeLoginStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    emailCodeLoginStart(emailCodeLoginStartReq: EmailCodeLoginStartReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailCodeLoginStartRsp, any>>;
    /**
     * Performs email OTP register start
     * @param {EmailCodeRegisterStartReq} emailCodeRegisterStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    emailCodeRegisterStart(emailCodeRegisterStartReq: EmailCodeRegisterStartReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailCodeRegisterStartRsp, any>>;
    /**
     * Performs email OTP login status check
     * @param {EmailCodeStatusReq} emailCodeStatusReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    emailCodeStatus(emailCodeStatusReq: EmailCodeStatusReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailCodeStatusRsp, any>>;
    /**
     * Performs email link register confirm
     * @param {EmailLinkConfirmReq} emailLinkConfirmReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    emailLinkConfirm(emailLinkConfirmReq: EmailLinkConfirmReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailLinkConfirmRsp, any>>;
    /**
     * Performs email link login start
     * @param {EmailLinkLoginStartReq} emailLinkLoginStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    emailLinkLoginStart(emailLinkLoginStartReq: EmailLinkLoginStartReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailLinkLoginStartRsp, any>>;
    /**
     * Performs email link register start
     * @param {EmailLinkRegisterStartReq} emailLinkRegisterStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    emailLinkRegisterStart(emailLinkRegisterStartReq: EmailLinkRegisterStartReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailLinkRegisterStartRsp, any>>;
    /**
     * Performs email link login status check
     * @param {EmailLinkStatusReq} emailLinkStatusReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    emailLinkStatus(emailLinkStatusReq: EmailLinkStatusReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EmailLinkStatusRsp, any>>;
    /**
     * Performs login for given token
     * @param {LoginTokenReq} loginTokenReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    loginToken(loginTokenReq: LoginTokenReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LoginTokenRsp, any>>;
    /**
     * Performs passkey append finish
     * @param {PassKeyFinishReq} passKeyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    passKeyAppendFinish(passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PassKeyAppendFinishRsp, any>>;
    /**
     * Performs passkey append start
     * @param {EmptyReq} emptyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    passKeyAppendStart(emptyReq: EmptyReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PassKeyStartRsp, any>>;
    /**
     * Performs passkey associate start
     * @param {PassKeyAssociateStartReq} passKeyAssociateStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    passKeyAssociateStart(passKeyAssociateStartReq: PassKeyAssociateStartReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PassKeyStartRsp, any>>;
    /**
     * Checks if active passkey credential exists for provided user and device
     * @param {PassKeyCredentialExistsReq} passKeyCredentialExistsReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    passKeyCredentialExists(passKeyCredentialExistsReq: PassKeyCredentialExistsReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PassKeyCredentialExistsRsp, any>>;
    /**
     * Performs passkey login finish
     * @param {PassKeyFinishReq} passKeyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    passKeyLoginFinish(passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PassKeyLoginFinishRsp, any>>;
    /**
     * Performs passkey login start
     * @param {PassKeyLoginStartReq} passKeyLoginStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    passKeyLoginStart(passKeyLoginStartReq: PassKeyLoginStartReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PassKeyStartRsp, any>>;
    /**
     * Performs passkey mediation start
     * @param {PassKeyMediationStartReq} passKeyMediationStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    passKeyMediationStart(passKeyMediationStartReq: PassKeyMediationStartReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PassKeyMediationStartRsp, any>>;
    /**
     * Performs passkey register finish
     * @param {PassKeyFinishReq} passKeyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    passKeyRegisterFinish(passKeyFinishReq: PassKeyFinishReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PassKeyRegisterFinishRsp, any>>;
    /**
     * Performs passkey register start
     * @param {PassKeyRegisterStartReq} passKeyRegisterStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    passKeyRegisterStart(passKeyRegisterStartReq: PassKeyRegisterStartReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PassKeyStartRsp, any>>;
    /**
     * Performs password verify
     * @param {PasswordVerifyReq} passwordVerifyReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    password(passwordVerifyReq: PasswordVerifyReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PasswordVerifyRsp, any>>;
    /**
     * Checks if a confirmed user exists for provided login identifier
     * @param {UserExistsReq} userExistsReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    userExists(userExistsReq: UserExistsReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserExistsRsp, any>>;
}
