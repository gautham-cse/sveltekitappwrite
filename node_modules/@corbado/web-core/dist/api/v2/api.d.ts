/**
 * Corbado Frontend API
 * Overview of all Corbado Frontend API calls to implement passwordless authentication.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @enum {string}
 */
export declare const AuthType: {
    readonly Signup: "signup";
    readonly Login: "login";
};
export type AuthType = typeof AuthType[keyof typeof AuthType];
/**
 *
 * @export
 * @interface AuthenticationResponse
 */
export interface AuthenticationResponse {
    /**
     * Only given when project environment is dev
     * @type {string}
     * @memberof AuthenticationResponse
     */
    'longSession'?: string;
    /**
     *
     * @type {string}
     * @memberof AuthenticationResponse
     */
    'shortSession': string;
    /**
     *
     * @type {PasskeyOperation}
     * @memberof AuthenticationResponse
     */
    'passkeyOperation'?: PasskeyOperation;
}
/**
 *
 * @export
 * @interface BlockBody
 */
export interface BlockBody {
    /**
     *
     * @type {BlockType}
     * @memberof BlockBody
     */
    'block': BlockType;
    /**
     *
     * @type {AuthType}
     * @memberof BlockBody
     */
    'authType': AuthType;
    /**
     *
     * @type {BlockBodyData}
     * @memberof BlockBody
     */
    'data': BlockBodyData;
    /**
     *
     * @type {Array<BlockBody>}
     * @memberof BlockBody
     */
    'alternatives'?: Array<BlockBody>;
    /**
     *
     * @type {RequestError}
     * @memberof BlockBody
     */
    'error'?: RequestError;
    /**
     *
     * @type {ContinueOnOtherDevice}
     * @memberof BlockBody
     */
    'continueOnOtherDevice'?: ContinueOnOtherDevice;
}
/**
 *
 * @export
 * @interface BlockBodyData
 */
export interface BlockBodyData {
    /**
     *
     * @type {string}
     * @memberof BlockBodyData
     */
    'challenge': string;
    /**
     *
     * @type {string}
     * @memberof BlockBodyData
     */
    'identifierValue': string;
    /**
     *
     * @type {LoginIdentifierType}
     * @memberof BlockBodyData
     */
    'identifierType': LoginIdentifierType;
    /**
     *
     * @type {boolean}
     * @memberof BlockBodyData
     */
    'autoSubmit': boolean;
    /**
     *
     * @type {PasskeyIconSet}
     * @memberof BlockBodyData
     */
    'passkeyIconSet': PasskeyIconSet;
    /**
     *
     * @type {VerificationMethod}
     * @memberof BlockBodyData
     */
    'verificationMethod': VerificationMethod;
    /**
     *
     * @type {string}
     * @memberof BlockBodyData
     */
    'identifier': string;
    /**
     *
     * @type {number}
     * @memberof BlockBodyData
     */
    'retryNotBefore'?: number;
    /**
     *
     * @type {RequestError}
     * @memberof BlockBodyData
     */
    'error'?: RequestError;
    /**
     *
     * @type {Array<object>}
     * @memberof BlockBodyData
     */
    'alternativeVerificationMethods': Array<object>;
    /**
     *
     * @type {boolean}
     * @memberof BlockBodyData
     */
    'isPostLoginVerification': boolean;
    /**
     * Only given when project environment is dev
     * @type {string}
     * @memberof BlockBodyData
     */
    'longSession'?: string;
    /**
     *
     * @type {string}
     * @memberof BlockBodyData
     */
    'shortSession': string;
    /**
     *
     * @type {PasskeyOperation}
     * @memberof BlockBodyData
     */
    'passkeyOperation'?: PasskeyOperation;
    /**
     *
     * @type {Array<LoginIdentifierWithError>}
     * @memberof BlockBodyData
     */
    'identifiers': Array<LoginIdentifierWithError>;
    /**
     *
     * @type {FullNameWithError}
     * @memberof BlockBodyData
     */
    'fullName'?: FullNameWithError;
    /**
     *
     * @type {SocialData}
     * @memberof BlockBodyData
     */
    'socialData': SocialData;
    /**
     *
     * @type {LoginIdentifierType}
     * @memberof BlockBodyData
     */
    'type': LoginIdentifierType;
    /**
     *
     * @type {string}
     * @memberof BlockBodyData
     */
    'conditionalUIChallenge'?: string;
    /**
     *
     * @type {boolean}
     * @memberof BlockBodyData
     */
    'isPhone': boolean;
    /**
     *
     * @type {boolean}
     * @memberof BlockBodyData
     */
    'isPhoneAvailable': boolean;
    /**
     *
     * @type {boolean}
     * @memberof BlockBodyData
     */
    'isEmailAvailable': boolean;
    /**
     *
     * @type {boolean}
     * @memberof BlockBodyData
     */
    'isUsernameAvailable': boolean;
    /**
     *
     * @type {RequestError}
     * @memberof BlockBodyData
     */
    'fieldError'?: RequestError;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const BlockType: {
    readonly SignupInit: "signup-init";
    readonly PasskeyAppend: "passkey-append";
    readonly PhoneVerify: "phone-verify";
    readonly EmailVerify: "email-verify";
    readonly PasskeyAppended: "passkey-appended";
    readonly Completed: "completed";
    readonly SocialVerify: "social-verify";
    readonly UsernameCollect: "username-collect";
    readonly PhoneCollect: "phone-collect";
    readonly LoginInit: "login-init";
    readonly PasskeyVerify: "passkey-verify";
    readonly ConditionalUiCompleted: "conditional-ui-completed";
    readonly PostSignupEmailVerify: "post-signup-email-verify";
    readonly PasskeyAppendAfterHybrid: "passkey-append-after-hybrid";
};
export type BlockType = typeof BlockType[keyof typeof BlockType];
/**
 *
 * @export
 * @interface ClientInformation
 */
export interface ClientInformation {
    /**
     *
     * @type {boolean}
     * @memberof ClientInformation
     */
    'bluetoothAvailable': boolean;
    /**
     *
     * @type {string}
     * @memberof ClientInformation
     */
    'clientEnvHandle'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ClientInformation
     */
    'canUsePasskeys': boolean;
    /**
     *
     * @type {JavaScriptHighEntropy}
     * @memberof ClientInformation
     */
    'javaScriptHighEntropy'?: JavaScriptHighEntropy;
}
/**
 *
 * @export
 * @interface ContinueOnOtherDevice
 */
export interface ContinueOnOtherDevice {
    /**
     *
     * @type {string}
     * @memberof ContinueOnOtherDevice
     */
    'reason': ContinueOnOtherDeviceReasonEnum;
}
export declare const ContinueOnOtherDeviceReasonEnum: {
    readonly EmailLinkVerified: "email-link-verified";
    readonly ProcessAlreadyCompleted: "process-already-completed";
};
export type ContinueOnOtherDeviceReasonEnum = typeof ContinueOnOtherDeviceReasonEnum[keyof typeof ContinueOnOtherDeviceReasonEnum];
/**
 *
 * @export
 * @interface FullNameWithError
 */
export interface FullNameWithError {
    /**
     *
     * @type {string}
     * @memberof FullNameWithError
     */
    'fullName': string;
    /**
     *
     * @type {RequestError}
     * @memberof FullNameWithError
     */
    'error'?: RequestError;
}
/**
 *
 * @export
 * @interface GeneralBlockLoginInit
 */
export interface GeneralBlockLoginInit {
    /**
     *
     * @type {string}
     * @memberof GeneralBlockLoginInit
     */
    'conditionalUIChallenge'?: string;
    /**
     *
     * @type {string}
     * @memberof GeneralBlockLoginInit
     */
    'identifierValue': string;
    /**
     *
     * @type {boolean}
     * @memberof GeneralBlockLoginInit
     */
    'isPhone': boolean;
    /**
     *
     * @type {boolean}
     * @memberof GeneralBlockLoginInit
     */
    'isPhoneAvailable': boolean;
    /**
     *
     * @type {boolean}
     * @memberof GeneralBlockLoginInit
     */
    'isEmailAvailable': boolean;
    /**
     *
     * @type {boolean}
     * @memberof GeneralBlockLoginInit
     */
    'isUsernameAvailable': boolean;
    /**
     *
     * @type {SocialData}
     * @memberof GeneralBlockLoginInit
     */
    'socialData': SocialData;
    /**
     *
     * @type {RequestError}
     * @memberof GeneralBlockLoginInit
     */
    'fieldError'?: RequestError;
    /**
     *
     * @type {RequestError}
     * @memberof GeneralBlockLoginInit
     */
    'error'?: RequestError;
}
/**
 *
 * @export
 * @interface GeneralBlockPasskeyAppend
 */
export interface GeneralBlockPasskeyAppend {
    /**
     *
     * @type {string}
     * @memberof GeneralBlockPasskeyAppend
     */
    'challenge': string;
    /**
     *
     * @type {string}
     * @memberof GeneralBlockPasskeyAppend
     */
    'identifierValue': string;
    /**
     *
     * @type {LoginIdentifierType}
     * @memberof GeneralBlockPasskeyAppend
     */
    'identifierType': LoginIdentifierType;
    /**
     *
     * @type {boolean}
     * @memberof GeneralBlockPasskeyAppend
     */
    'autoSubmit': boolean;
    /**
     *
     * @type {PasskeyIconSet}
     * @memberof GeneralBlockPasskeyAppend
     */
    'passkeyIconSet': PasskeyIconSet;
}
/**
 *
 * @export
 * @interface GeneralBlockPasskeyAppendAfterHybrid
 */
export interface GeneralBlockPasskeyAppendAfterHybrid {
    /**
     *
     * @type {string}
     * @memberof GeneralBlockPasskeyAppendAfterHybrid
     */
    'challenge': string;
    /**
     *
     * @type {PasskeyIconSet}
     * @memberof GeneralBlockPasskeyAppendAfterHybrid
     */
    'passkeyIconSet': PasskeyIconSet;
}
/**
 *
 * @export
 * @interface GeneralBlockPasskeyVerify
 */
export interface GeneralBlockPasskeyVerify {
    /**
     *
     * @type {string}
     * @memberof GeneralBlockPasskeyVerify
     */
    'challenge': string;
    /**
     *
     * @type {string}
     * @memberof GeneralBlockPasskeyVerify
     */
    'identifierValue': string;
}
/**
 *
 * @export
 * @interface GeneralBlockPostSignupEmailVerify
 */
export interface GeneralBlockPostSignupEmailVerify {
    /**
     *
     * @type {RequestError}
     * @memberof GeneralBlockPostSignupEmailVerify
     */
    'error'?: RequestError;
}
/**
 *
 * @export
 * @interface GeneralBlockSignupInit
 */
export interface GeneralBlockSignupInit {
    /**
     *
     * @type {Array<LoginIdentifierWithError>}
     * @memberof GeneralBlockSignupInit
     */
    'identifiers': Array<LoginIdentifierWithError>;
    /**
     *
     * @type {FullNameWithError}
     * @memberof GeneralBlockSignupInit
     */
    'fullName'?: FullNameWithError;
    /**
     *
     * @type {SocialData}
     * @memberof GeneralBlockSignupInit
     */
    'socialData'?: SocialData;
    /**
     *
     * @type {RequestError}
     * @memberof GeneralBlockSignupInit
     */
    'error'?: RequestError;
}
/**
 *
 * @export
 * @interface GeneralBlockVerifyIdentifier
 */
export interface GeneralBlockVerifyIdentifier {
    /**
     *
     * @type {VerificationMethod}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'verificationMethod': VerificationMethod;
    /**
     *
     * @type {string}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'identifier': string;
    /**
     *
     * @type {number}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'retryNotBefore'?: number;
    /**
     *
     * @type {RequestError}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'error'?: RequestError;
    /**
     *
     * @type {Array<object>}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'alternativeVerificationMethods': Array<object>;
    /**
     *
     * @type {boolean}
     * @memberof GeneralBlockVerifyIdentifier
     */
    'isPostLoginVerification': boolean;
}
/**
 *
 * @export
 * @interface Identifier
 */
export interface Identifier {
    /**
     *
     * @type {string}
     * @memberof Identifier
     */
    'value': string;
    /**
     *
     * @type {LoginIdentifierType}
     * @memberof Identifier
     */
    'type': LoginIdentifierType;
    /**
     *
     * @type {string}
     * @memberof Identifier
     */
    'status': string;
}
/**
 *
 * @export
 * @interface IdentifierUpdateReq
 */
export interface IdentifierUpdateReq {
    /**
     *
     * @type {LoginIdentifierType}
     * @memberof IdentifierUpdateReq
     */
    'identifierType': LoginIdentifierType;
    /**
     *
     * @type {string}
     * @memberof IdentifierUpdateReq
     */
    'value': string;
}
/**
 *
 * @export
 * @interface IdentifierVerifyFinishReq
 */
export interface IdentifierVerifyFinishReq {
    /**
     *
     * @type {string}
     * @memberof IdentifierVerifyFinishReq
     */
    'code': string;
    /**
     *
     * @type {LoginIdentifierType}
     * @memberof IdentifierVerifyFinishReq
     */
    'identifierType': LoginIdentifierType;
    /**
     *
     * @type {VerificationMethod}
     * @memberof IdentifierVerifyFinishReq
     */
    'verificationType': VerificationMethod;
    /**
     *
     * @type {boolean}
     * @memberof IdentifierVerifyFinishReq
     */
    'isNewDevice': boolean;
}
/**
 * tbd.
 * @export
 * @interface IdentifierVerifyStartReq
 */
export interface IdentifierVerifyStartReq {
    /**
     *
     * @type {LoginIdentifierType}
     * @memberof IdentifierVerifyStartReq
     */
    'identifierType': LoginIdentifierType;
    /**
     *
     * @type {VerificationMethod}
     * @memberof IdentifierVerifyStartReq
     */
    'verificationType': VerificationMethod;
}
/**
 *
 * @export
 * @interface JavaScriptHighEntropy
 */
export interface JavaScriptHighEntropy {
    /**
     *
     * @type {string}
     * @memberof JavaScriptHighEntropy
     */
    'platform': string;
    /**
     *
     * @type {string}
     * @memberof JavaScriptHighEntropy
     */
    'platformVersion': string;
    /**
     *
     * @type {boolean}
     * @memberof JavaScriptHighEntropy
     */
    'mobile': boolean;
}
/**
 *
 * @export
 * @interface LoginIdentifier
 */
export interface LoginIdentifier {
    /**
     *
     * @type {LoginIdentifierType}
     * @memberof LoginIdentifier
     */
    'type': LoginIdentifierType;
    /**
     *
     * @type {string}
     * @memberof LoginIdentifier
     */
    'identifier': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const LoginIdentifierType: {
    readonly Email: "email";
    readonly Phone: "phone";
    readonly Username: "username";
};
export type LoginIdentifierType = typeof LoginIdentifierType[keyof typeof LoginIdentifierType];
/**
 *
 * @export
 * @interface LoginIdentifierWithError
 */
export interface LoginIdentifierWithError {
    /**
     *
     * @type {LoginIdentifierType}
     * @memberof LoginIdentifierWithError
     */
    'type': LoginIdentifierType;
    /**
     *
     * @type {string}
     * @memberof LoginIdentifierWithError
     */
    'identifier': string;
    /**
     *
     * @type {RequestError}
     * @memberof LoginIdentifierWithError
     */
    'error'?: RequestError;
}
/**
 * tbd.
 * @export
 * @interface LoginInitReq
 */
export interface LoginInitReq {
    /**
     *
     * @type {string}
     * @memberof LoginInitReq
     */
    'identifierValue': string;
    /**
     *
     * @type {boolean}
     * @memberof LoginInitReq
     */
    'isPhone': boolean;
}
/**
 *
 * @export
 * @interface MePasskeyDeleteRsp
 */
export interface MePasskeyDeleteRsp {
    /**
     *
     * @type {string}
     * @memberof MePasskeyDeleteRsp
     */
    'id': string;
}
/**
 *
 * @export
 * @interface MePasskeyRsp
 */
export interface MePasskeyRsp {
    /**
     *
     * @type {Array<Passkey>}
     * @memberof MePasskeyRsp
     */
    'passkeys': Array<Passkey>;
    /**
     *
     * @type {Paging}
     * @memberof MePasskeyRsp
     */
    'paging': Paging;
}
/**
 *
 * @export
 * @interface MePasskeysAppendFinishReq
 */
export interface MePasskeysAppendFinishReq {
    /**
     *
     * @type {string}
     * @memberof MePasskeysAppendFinishReq
     */
    'attestationResponse': string;
    /**
     *
     * @type {ClientInformation}
     * @memberof MePasskeysAppendFinishReq
     */
    'clientInformation': ClientInformation;
}
/**
 *
 * @export
 * @interface MePasskeysAppendStartReq
 */
export interface MePasskeysAppendStartReq {
    /**
     *
     * @type {ClientInformation}
     * @memberof MePasskeysAppendStartReq
     */
    'clientInformation': ClientInformation;
}
/**
 *
 * @export
 * @interface MePasskeysAppendStartRsp
 */
export interface MePasskeysAppendStartRsp {
    /**
     *
     * @type {string}
     * @memberof MePasskeysAppendStartRsp
     */
    'newClientEnvHandle'?: string;
    /**
     *
     * @type {string}
     * @memberof MePasskeysAppendStartRsp
     */
    'appendNotAllowedReason'?: MePasskeysAppendStartRspAppendNotAllowedReasonEnum;
    /**
     *
     * @type {string}
     * @memberof MePasskeysAppendStartRsp
     */
    'attestationOptions': string;
}
export declare const MePasskeysAppendStartRspAppendNotAllowedReasonEnum: {
    readonly PasskeyAlreadyExists: "passkey_already_exists";
    readonly PasskeysNotSupported: "passkeys_not_supported";
};
export type MePasskeysAppendStartRspAppendNotAllowedReasonEnum = typeof MePasskeysAppendStartRspAppendNotAllowedReasonEnum[keyof typeof MePasskeysAppendStartRspAppendNotAllowedReasonEnum];
/**
 *
 * @export
 * @interface MeRefreshRsp
 */
export interface MeRefreshRsp {
    /**
     *
     * @type {string}
     * @memberof MeRefreshRsp
     */
    'shortSession': string;
}
/**
 *
 * @export
 * @interface MeRsp
 */
export interface MeRsp {
    /**
     *
     * @type {string}
     * @memberof MeRsp
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof MeRsp
     */
    'fullName': string;
    /**
     *
     * @type {Array<Identifier>}
     * @memberof MeRsp
     */
    'identifiers': Array<Identifier>;
    /**
     *
     * @type {Array<SocialAccount>}
     * @memberof MeRsp
     */
    'socialAccounts': Array<SocialAccount>;
}
/**
 *
 * @export
 * @interface Paging
 */
export interface Paging {
    /**
     * current page returned in response
     * @type {number}
     * @memberof Paging
     */
    'page': number;
    /**
     * total number of pages available
     * @type {number}
     * @memberof Paging
     */
    'totalPages': number;
    /**
     * total number of items available
     * @type {number}
     * @memberof Paging
     */
    'totalItems': number;
}
/**
 *
 * @export
 * @interface Passkey
 */
export interface Passkey {
    /**
     *
     * @type {string}
     * @memberof Passkey
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Passkey
     */
    'credentialID': string;
    /**
     *
     * @type {string}
     * @memberof Passkey
     */
    'attestationType': string;
    /**
     *
     * @type {Array<string>}
     * @memberof Passkey
     */
    'transport': Array<PasskeyTransportEnum>;
    /**
     *
     * @type {boolean}
     * @memberof Passkey
     */
    'backupEligible': boolean;
    /**
     *
     * @type {boolean}
     * @memberof Passkey
     */
    'backupState': boolean;
    /**
     *
     * @type {string}
     * @memberof Passkey
     */
    'authenticatorAAGUID': string;
    /**
     *
     * @type {string}
     * @memberof Passkey
     */
    'sourceOS': string;
    /**
     *
     * @type {string}
     * @memberof Passkey
     */
    'sourceBrowser': string;
    /**
     * Timestamp of when the passkey was last used in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof Passkey
     */
    'lastUsed': string;
    /**
     * Timestamp of when the entity was created in yyyy-MM-dd\'T\'HH:mm:ss format
     * @type {string}
     * @memberof Passkey
     */
    'created': string;
    /**
     * Status
     * @type {string}
     * @memberof Passkey
     */
    'status': PasskeyStatusEnum;
}
export declare const PasskeyTransportEnum: {
    readonly Usb: "usb";
    readonly Nfc: "nfc";
    readonly Ble: "ble";
    readonly Internal: "internal";
    readonly Hybrid: "hybrid";
    readonly SmartCard: "smart-card";
};
export type PasskeyTransportEnum = typeof PasskeyTransportEnum[keyof typeof PasskeyTransportEnum];
export declare const PasskeyStatusEnum: {
    readonly Pending: "pending";
    readonly Active: "active";
};
export type PasskeyStatusEnum = typeof PasskeyStatusEnum[keyof typeof PasskeyStatusEnum];
/**
 * tbd.
 * @export
 * @interface PasskeyAppendFinishReq
 */
export interface PasskeyAppendFinishReq {
    /**
     *
     * @type {string}
     * @memberof PasskeyAppendFinishReq
     */
    'signedChallenge': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const PasskeyIconSet: {
    readonly Default: "default";
    readonly Apple: "apple";
    readonly Android: "android";
    readonly Windows: "windows";
};
export type PasskeyIconSet = typeof PasskeyIconSet[keyof typeof PasskeyIconSet];
/**
 * tbd.
 * @export
 * @interface PasskeyLoginFinishReq
 */
export interface PasskeyLoginFinishReq {
    /**
     *
     * @type {string}
     * @memberof PasskeyLoginFinishReq
     */
    'signedChallenge': string;
}
/**
 * tbd.
 * @export
 * @interface PasskeyMediationFinishReq
 */
export interface PasskeyMediationFinishReq {
    /**
     *
     * @type {string}
     * @memberof PasskeyMediationFinishReq
     */
    'signedChallenge': string;
}
/**
 *
 * @export
 * @interface PasskeyOperation
 */
export interface PasskeyOperation {
    /**
     *
     * @type {string}
     * @memberof PasskeyOperation
     */
    'operationType': PasskeyOperationOperationTypeEnum;
    /**
     *
     * @type {string}
     * @memberof PasskeyOperation
     */
    'identifierValue': string;
    /**
     *
     * @type {LoginIdentifierType}
     * @memberof PasskeyOperation
     */
    'identifierType': LoginIdentifierType;
    /**
     *
     * @type {boolean}
     * @memberof PasskeyOperation
     */
    'isCDA': boolean;
}
export declare const PasskeyOperationOperationTypeEnum: {
    readonly Append: "append";
    readonly Verify: "verify";
};
export type PasskeyOperationOperationTypeEnum = typeof PasskeyOperationOperationTypeEnum[keyof typeof PasskeyOperationOperationTypeEnum];
/**
 *
 * @export
 * @interface PhoneCollectReq
 */
export interface PhoneCollectReq {
    /**
     *
     * @type {string}
     * @memberof PhoneCollectReq
     */
    'value': string;
}
/**
 *
 * @export
 * @interface ProcessCommon
 */
export interface ProcessCommon {
    /**
     *
     * @type {string}
     * @memberof ProcessCommon
     */
    'appName': string;
    /**
     *
     * @type {string}
     * @memberof ProcessCommon
     */
    'frontendApiUrl': string;
}
/**
 * tbd.
 * @export
 * @interface ProcessInitReq
 */
export interface ProcessInitReq {
    /**
     *
     * @type {ClientInformation}
     * @memberof ProcessInitReq
     */
    'clientInformation': ClientInformation;
    /**
     *
     * @type {number}
     * @memberof ProcessInitReq
     */
    'passkeyAppendShown'?: number;
    /**
     *
     * @type {boolean}
     * @memberof ProcessInitReq
     */
    'optOutOfPasskeyAppendAfterHybrid'?: boolean;
    /**
     *
     * @type {BlockType}
     * @memberof ProcessInitReq
     */
    'preferredBlock'?: BlockType;
}
/**
 * tbd.
 * @export
 * @interface ProcessInitRsp
 */
export interface ProcessInitRsp {
    /**
     *
     * @type {string}
     * @memberof ProcessInitRsp
     */
    'newClientEnvHandle'?: string;
    /**
     *
     * @type {string}
     * @memberof ProcessInitRsp
     */
    'token': string;
    /**
     *
     * @type {number}
     * @memberof ProcessInitRsp
     */
    'expiresAt': number;
    /**
     *
     * @type {ProcessResponse}
     * @memberof ProcessInitRsp
     */
    'processResponse': ProcessResponse;
}
/**
 *
 * @export
 * @interface ProcessResponse
 */
export interface ProcessResponse {
    /**
     *
     * @type {BlockBody}
     * @memberof ProcessResponse
     */
    'blockBody': BlockBody;
    /**
     *
     * @type {ProcessCommon}
     * @memberof ProcessResponse
     */
    'common': ProcessCommon;
    /**
     *
     * @type {ProcessStaticInfo}
     * @memberof ProcessResponse
     */
    'newProcess'?: ProcessStaticInfo;
}
/**
 *
 * @export
 * @interface ProcessStaticInfo
 */
export interface ProcessStaticInfo {
    /**
     *
     * @type {string}
     * @memberof ProcessStaticInfo
     */
    'token': string;
    /**
     *
     * @type {number}
     * @memberof ProcessStaticInfo
     */
    'expiresAt': number;
}
/**
 *
 * @export
 * @interface RequestError
 */
export interface RequestError {
    /**
     *
     * @type {string}
     * @memberof RequestError
     */
    'code': string;
    /**
     *
     * @type {string}
     * @memberof RequestError
     */
    'message': string;
}
/**
 *
 * @export
 * @interface SessionConfigRsp
 */
export interface SessionConfigRsp {
    /**
     *
     * @type {boolean}
     * @memberof SessionConfigRsp
     */
    'useSessionManagement': boolean;
    /**
     *
     * @type {ShortSessionCookieConfig}
     * @memberof SessionConfigRsp
     */
    'shortSessionCookieConfig'?: ShortSessionCookieConfig;
    /**
     *
     * @type {string}
     * @memberof SessionConfigRsp
     */
    'frontendApiUrl'?: string;
}
/**
 *
 * @export
 * @interface ShortSessionCookieConfig
 */
export interface ShortSessionCookieConfig {
    /**
     *
     * @type {string}
     * @memberof ShortSessionCookieConfig
     */
    'domain': string;
    /**
     *
     * @type {boolean}
     * @memberof ShortSessionCookieConfig
     */
    'secure': boolean;
    /**
     *
     * @type {string}
     * @memberof ShortSessionCookieConfig
     */
    'sameSite': ShortSessionCookieConfigSameSiteEnum;
    /**
     *
     * @type {string}
     * @memberof ShortSessionCookieConfig
     */
    'path': string;
    /**
     *
     * @type {number}
     * @memberof ShortSessionCookieConfig
     */
    'lifetimeSeconds': number;
}
export declare const ShortSessionCookieConfigSameSiteEnum: {
    readonly Lax: "lax";
    readonly Strict: "strict";
    readonly None: "none";
};
export type ShortSessionCookieConfigSameSiteEnum = typeof ShortSessionCookieConfigSameSiteEnum[keyof typeof ShortSessionCookieConfigSameSiteEnum];
/**
 * tbd.
 * @export
 * @interface SignupInitReq
 */
export interface SignupInitReq {
    /**
     *
     * @type {string}
     * @memberof SignupInitReq
     */
    'fullName'?: string;
    /**
     *
     * @type {Array<LoginIdentifier>}
     * @memberof SignupInitReq
     */
    'identifiers': Array<LoginIdentifier>;
}
/**
 *
 * @export
 * @interface SocialAccount
 */
export interface SocialAccount {
    /**
     *
     * @type {SocialProviderType}
     * @memberof SocialAccount
     */
    'providerType': SocialProviderType;
    /**
     *
     * @type {string}
     * @memberof SocialAccount
     */
    'identifierValue': string;
    /**
     *
     * @type {string}
     * @memberof SocialAccount
     */
    'avatarUrl': string;
    /**
     *
     * @type {string}
     * @memberof SocialAccount
     */
    'fullName': string;
}
/**
 *
 * @export
 * @interface SocialData
 */
export interface SocialData {
    /**
     *
     * @type {Array<SocialProviderType>}
     * @memberof SocialData
     */
    'providers': Array<SocialProviderType>;
    /**
     *
     * @type {string}
     * @memberof SocialData
     */
    'status': SocialDataStatusEnum;
    /**
     *
     * @type {string}
     * @memberof SocialData
     */
    'oauthUrl'?: string;
    /**
     *
     * @type {RequestError}
     * @memberof SocialData
     */
    'error'?: RequestError;
}
export declare const SocialDataStatusEnum: {
    readonly Initial: "initial";
    readonly Started: "started";
    readonly Finished: "finished";
};
export type SocialDataStatusEnum = typeof SocialDataStatusEnum[keyof typeof SocialDataStatusEnum];
/**
 *
 * @export
 * @enum {string}
 */
export declare const SocialProviderType: {
    readonly Google: "google";
    readonly Microsoft: "microsoft";
    readonly Github: "github";
};
export type SocialProviderType = typeof SocialProviderType[keyof typeof SocialProviderType];
/**
 *
 * @export
 * @interface SocialVerifyStartReq
 */
export interface SocialVerifyStartReq {
    /**
     *
     * @type {SocialProviderType}
     * @memberof SocialVerifyStartReq
     */
    'providerType': SocialProviderType;
    /**
     *
     * @type {string}
     * @memberof SocialVerifyStartReq
     */
    'redirectUrl': string;
    /**
     *
     * @type {AuthType}
     * @memberof SocialVerifyStartReq
     */
    'authType': AuthType;
}
/**
 *
 * @export
 * @interface UsernameCollectReq
 */
export interface UsernameCollectReq {
    /**
     *
     * @type {string}
     * @memberof UsernameCollectReq
     */
    'value': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const VerificationMethod: {
    readonly EmailLink: "email-link";
    readonly EmailOtp: "email-otp";
    readonly PhoneOtp: "phone-otp";
};
export type VerificationMethod = typeof VerificationMethod[keyof typeof VerificationMethod];
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockSkip: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {IdentifierUpdateReq} identifierUpdateReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierUpdate: (identifierUpdateReq: IdentifierUpdateReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {IdentifierVerifyFinishReq} identifierVerifyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierVerifyFinish: (identifierVerifyFinishReq: IdentifierVerifyFinishReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {IdentifierVerifyStartReq} identifierVerifyStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierVerifyStart: (identifierVerifyStartReq: IdentifierVerifyStartReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierVerifyStatus: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {LoginInitReq} loginInitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginInit: (loginInitReq: LoginInitReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {PasskeyAppendFinishReq} passkeyAppendFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyAppendFinish: (passkeyAppendFinishReq: PasskeyAppendFinishReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyAppendStart: (body: object, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {PasskeyLoginFinishReq} passkeyLoginFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyLoginFinish: (passkeyLoginFinishReq: PasskeyLoginFinishReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyLoginStart: (body: object, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {PasskeyMediationFinishReq} passkeyMediationFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyMediationFinish: (passkeyMediationFinishReq: PasskeyMediationFinishReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {PhoneCollectReq} phoneCollectReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    phoneCollect: (phoneCollectReq: PhoneCollectReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processComplete: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {BlockType} [preferredBlock]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processGet: (preferredBlock?: BlockType, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {ProcessInitReq} processInitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processInit: (processInitReq: ProcessInitReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processReset: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {SignupInitReq} signupInitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signupInit: (signupInitReq: SignupInitReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    socialVerifyCallback: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    socialVerifyFinish: (body: object, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {SocialVerifyStartReq} socialVerifyStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    socialVerifyStart: (socialVerifyStartReq: SocialVerifyStartReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * tbd
     * @param {UsernameCollectReq} usernameCollectReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usernameCollect: (usernameCollectReq: UsernameCollectReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockSkip(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {IdentifierUpdateReq} identifierUpdateReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierUpdate(identifierUpdateReq: IdentifierUpdateReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {IdentifierVerifyFinishReq} identifierVerifyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierVerifyFinish(identifierVerifyFinishReq: IdentifierVerifyFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {IdentifierVerifyStartReq} identifierVerifyStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierVerifyStart(identifierVerifyStartReq: IdentifierVerifyStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierVerifyStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {LoginInitReq} loginInitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginInit(loginInitReq: LoginInitReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {PasskeyAppendFinishReq} passkeyAppendFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyAppendFinish(passkeyAppendFinishReq: PasskeyAppendFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyAppendStart(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {PasskeyLoginFinishReq} passkeyLoginFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyLoginFinish(passkeyLoginFinishReq: PasskeyLoginFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyLoginStart(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {PasskeyMediationFinishReq} passkeyMediationFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyMediationFinish(passkeyMediationFinishReq: PasskeyMediationFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {PhoneCollectReq} phoneCollectReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    phoneCollect(phoneCollectReq: PhoneCollectReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processComplete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {BlockType} [preferredBlock]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processGet(preferredBlock?: BlockType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {ProcessInitReq} processInitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processInit(processInitReq: ProcessInitReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInitRsp>>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processReset(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {SignupInitReq} signupInitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signupInit(signupInitReq: SignupInitReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    socialVerifyCallback(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * tbd
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    socialVerifyFinish(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {SocialVerifyStartReq} socialVerifyStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    socialVerifyStart(socialVerifyStartReq: SocialVerifyStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
    /**
     * tbd
     * @param {UsernameCollectReq} usernameCollectReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usernameCollect(usernameCollectReq: UsernameCollectReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessResponse>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockSkip(options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {IdentifierUpdateReq} identifierUpdateReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierUpdate(identifierUpdateReq: IdentifierUpdateReq, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {IdentifierVerifyFinishReq} identifierVerifyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierVerifyFinish(identifierVerifyFinishReq: IdentifierVerifyFinishReq, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {IdentifierVerifyStartReq} identifierVerifyStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierVerifyStart(identifierVerifyStartReq: IdentifierVerifyStartReq, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    identifierVerifyStatus(options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {LoginInitReq} loginInitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginInit(loginInitReq: LoginInitReq, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {PasskeyAppendFinishReq} passkeyAppendFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyAppendFinish(passkeyAppendFinishReq: PasskeyAppendFinishReq, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyAppendStart(body: object, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {PasskeyLoginFinishReq} passkeyLoginFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyLoginFinish(passkeyLoginFinishReq: PasskeyLoginFinishReq, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyLoginStart(body: object, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {PasskeyMediationFinishReq} passkeyMediationFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    passkeyMediationFinish(passkeyMediationFinishReq: PasskeyMediationFinishReq, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {PhoneCollectReq} phoneCollectReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    phoneCollect(phoneCollectReq: PhoneCollectReq, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processComplete(options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {BlockType} [preferredBlock]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processGet(preferredBlock?: BlockType, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {ProcessInitReq} processInitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processInit(processInitReq: ProcessInitReq, options?: any): AxiosPromise<ProcessInitRsp>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processReset(options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {SignupInitReq} signupInitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signupInit(signupInitReq: SignupInitReq, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    socialVerifyCallback(options?: any): AxiosPromise<void>;
    /**
     * tbd
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    socialVerifyFinish(body: object, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {SocialVerifyStartReq} socialVerifyStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    socialVerifyStart(socialVerifyStartReq: SocialVerifyStartReq, options?: any): AxiosPromise<ProcessResponse>;
    /**
     * tbd
     * @param {UsernameCollectReq} usernameCollectReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usernameCollect(usernameCollectReq: UsernameCollectReq, options?: any): AxiosPromise<ProcessResponse>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    blockSkip(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {IdentifierUpdateReq} identifierUpdateReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    identifierUpdate(identifierUpdateReq: IdentifierUpdateReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {IdentifierVerifyFinishReq} identifierVerifyFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    identifierVerifyFinish(identifierVerifyFinishReq: IdentifierVerifyFinishReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {IdentifierVerifyStartReq} identifierVerifyStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    identifierVerifyStart(identifierVerifyStartReq: IdentifierVerifyStartReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    identifierVerifyStatus(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {LoginInitReq} loginInitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    loginInit(loginInitReq: LoginInitReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {PasskeyAppendFinishReq} passkeyAppendFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    passkeyAppendFinish(passkeyAppendFinishReq: PasskeyAppendFinishReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    passkeyAppendStart(body: object, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {PasskeyLoginFinishReq} passkeyLoginFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    passkeyLoginFinish(passkeyLoginFinishReq: PasskeyLoginFinishReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    passkeyLoginStart(body: object, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {PasskeyMediationFinishReq} passkeyMediationFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    passkeyMediationFinish(passkeyMediationFinishReq: PasskeyMediationFinishReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {PhoneCollectReq} phoneCollectReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    phoneCollect(phoneCollectReq: PhoneCollectReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    processComplete(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {BlockType} [preferredBlock]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    processGet(preferredBlock?: BlockType, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {ProcessInitReq} processInitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    processInit(processInitReq: ProcessInitReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessInitRsp, any>>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    processReset(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {SignupInitReq} signupInitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    signupInit(signupInitReq: SignupInitReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    socialVerifyCallback(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * tbd
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    socialVerifyFinish(body: object, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {SocialVerifyStartReq} socialVerifyStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    socialVerifyStart(socialVerifyStartReq: SocialVerifyStartReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
    /**
     * tbd
     * @param {UsernameCollectReq} usernameCollectReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    usernameCollect(usernameCollectReq: UsernameCollectReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessResponse, any>>;
}
/**
 * ConfigsApi - axios parameter creator
 * @export
 */
export declare const ConfigsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionConfig: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConfigsApi - functional programming interface
 * @export
 */
export declare const ConfigsApiFp: (configuration?: Configuration) => {
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionConfig(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionConfigRsp>>;
};
/**
 * ConfigsApi - factory interface
 * @export
 */
export declare const ConfigsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionConfig(options?: any): AxiosPromise<SessionConfigRsp>;
};
/**
 * ConfigsApi - object-oriented interface
 * @export
 * @class ConfigsApi
 * @extends {BaseAPI}
 */
export declare class ConfigsApi extends BaseAPI {
    /**
     * tbd
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigsApi
     */
    getSessionConfig(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SessionConfigRsp, any>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Gets current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Finishes passkey append for current user
     * @param {MePasskeysAppendFinishReq} mePasskeysAppendFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPasskeyAppendFinish: (mePasskeysAppendFinishReq: MePasskeysAppendFinishReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Starts passkey append for current user
     * @param {MePasskeysAppendStartReq} mePasskeysAppendStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPasskeyAppendStart: (mePasskeysAppendStartReq: MePasskeysAppendStartReq, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete current user\'s passkeys
     * @param {string} credentialID Credential ID from passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPasskeyDelete: (credentialID: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets current user\'s passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPasskeyGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs session logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserSessionLogout: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Performs session refresh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserSessionRefresh: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Gets current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeRsp>>;
    /**
     * Finishes passkey append for current user
     * @param {MePasskeysAppendFinishReq} mePasskeysAppendFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq: MePasskeysAppendFinishReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Starts passkey append for current user
     * @param {MePasskeysAppendStartReq} mePasskeysAppendStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPasskeyAppendStart(mePasskeysAppendStartReq: MePasskeysAppendStartReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MePasskeysAppendStartRsp>>;
    /**
     * Delete current user\'s passkeys
     * @param {string} credentialID Credential ID from passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPasskeyDelete(credentialID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MePasskeyDeleteRsp>>;
    /**
     * Gets current user\'s passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPasskeyGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MePasskeyRsp>>;
    /**
     * Performs session logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserSessionLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Performs session refresh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserSessionRefresh(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeRefreshRsp>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Gets current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserGet(options?: any): AxiosPromise<MeRsp>;
    /**
     * Finishes passkey append for current user
     * @param {MePasskeysAppendFinishReq} mePasskeysAppendFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq: MePasskeysAppendFinishReq, options?: any): AxiosPromise<void>;
    /**
     * Starts passkey append for current user
     * @param {MePasskeysAppendStartReq} mePasskeysAppendStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPasskeyAppendStart(mePasskeysAppendStartReq: MePasskeysAppendStartReq, options?: any): AxiosPromise<MePasskeysAppendStartRsp>;
    /**
     * Delete current user\'s passkeys
     * @param {string} credentialID Credential ID from passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPasskeyDelete(credentialID: string, options?: any): AxiosPromise<MePasskeyDeleteRsp>;
    /**
     * Gets current user\'s passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserPasskeyGet(options?: any): AxiosPromise<MePasskeyRsp>;
    /**
     * Performs session logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserSessionLogout(options?: any): AxiosPromise<void>;
    /**
     * Performs session refresh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    currentUserSessionRefresh(options?: any): AxiosPromise<MeRefreshRsp>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Gets current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    currentUserGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeRsp, any>>;
    /**
     * Finishes passkey append for current user
     * @param {MePasskeysAppendFinishReq} mePasskeysAppendFinishReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq: MePasskeysAppendFinishReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Starts passkey append for current user
     * @param {MePasskeysAppendStartReq} mePasskeysAppendStartReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    currentUserPasskeyAppendStart(mePasskeysAppendStartReq: MePasskeysAppendStartReq, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MePasskeysAppendStartRsp, any>>;
    /**
     * Delete current user\'s passkeys
     * @param {string} credentialID Credential ID from passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    currentUserPasskeyDelete(credentialID: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MePasskeyDeleteRsp, any>>;
    /**
     * Gets current user\'s passkeys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    currentUserPasskeyGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MePasskeyRsp, any>>;
    /**
     * Performs session logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    currentUserSessionLogout(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Performs session refresh
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    currentUserSessionRefresh(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MeRefreshRsp, any>>;
}
