/// <reference types="react" />
import type { CorbadoUser, PassKeyList, SessionUser } from '@corbado/types';
import type { CorbadoApp, CorbadoError, NonRecoverableError, PasskeyDeleteError } from '@corbado/web-core';
import type { Result } from 'ts-results';
export interface CorbadoSessionContextProps {
    corbadoApp: CorbadoApp | undefined;
    shortSession: string | undefined;
    loading: boolean;
    isAuthenticated: boolean;
    user: SessionUser | undefined;
    logout: () => Promise<void>;
    appendPasskey: () => Promise<Result<void, CorbadoError | undefined>>;
    getPasskeys: (abortController?: AbortController) => Promise<Result<PassKeyList, CorbadoError>>;
    deletePasskey: (id: string) => Promise<Result<void, PasskeyDeleteError>>;
    getFullUser: (abortController?: AbortController) => Promise<Result<CorbadoUser, CorbadoError>>;
    globalError: NonRecoverableError | undefined;
}
export declare const initialContext: CorbadoSessionContextProps;
export declare const CorbadoSessionContext: import("react").Context<CorbadoSessionContextProps>;
