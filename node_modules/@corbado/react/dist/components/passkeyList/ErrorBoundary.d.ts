import type { NonRecoverableError, RecoverableError } from '@corbado/web-core';
import React from 'react';
export type PasskeyListErrorBoundaryProps = React.PropsWithChildren<{
    globalError: NonRecoverableError | undefined;
}>;
export type PasskeyListErrorBoundaryState = {
    error: RecoverableError | undefined;
};
export declare class PasskeyListErrorBoundary extends React.Component<PasskeyListErrorBoundaryProps, PasskeyListErrorBoundaryState> {
    constructor(props: PasskeyListErrorBoundaryProps);
    static getDerivedStateFromError(error: Error): {
        hasError: boolean;
    };
    componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void;
    render(): string | number | boolean | Iterable<React.ReactNode> | React.JSX.Element | null | undefined;
}
