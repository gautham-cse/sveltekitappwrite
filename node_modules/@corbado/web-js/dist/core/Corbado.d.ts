import type { CorbadoAuthConfig, CorbadoLoginConfig, CorbadoSignUpConfig } from '@corbado/types';
import type { CorbadoConfig } from '../types/core';
export declare class Corbado {
    #private;
    get user(): import("@corbado/types").SessionUser | undefined;
    get shortSession(): string | undefined;
    get shortSessionChanges(): import("rxjs").BehaviorSubject<string | undefined>;
    get userChanges(): import("rxjs").BehaviorSubject<import("@corbado/types").SessionUser | undefined>;
    get isAuthenticated(): boolean | undefined;
    get authStateChanges(): import("rxjs").BehaviorSubject<import("@corbado/web-core").AuthState>;
    load(options: CorbadoConfig): Promise<void>;
    mountAuthUI(element: HTMLElement, options: CorbadoAuthConfig): void;
    unmountAuthUI(element: HTMLElement): void;
    mountSignUpUI(element: HTMLElement, options: CorbadoSignUpConfig): void;
    unmountSignUpUI(element: HTMLElement): void;
    mountLoginUI(element: HTMLElement, options: CorbadoLoginConfig): void;
    unmountLoginUI(element: HTMLElement): void;
    mountPasskeyListUI(element: HTMLElement): void;
    unmountPasskeyListUI(element: HTMLElement): void;
    mountUserUI(element: HTMLElement): void;
    unmountUserUI(element: HTMLElement): void;
    logout(): Promise<void>;
    getPasskeys(abortController?: AbortController): Promise<import("ts-results").Result<import("@corbado/types").PassKeyList, import("@corbado/web-core").CorbadoError>>;
    appendPasskey(): Promise<import("ts-results").Result<void, import("@corbado/web-core").CorbadoError | undefined>>;
    deletePasskey(id: string): Promise<import("ts-results").Result<void, import("@corbado/web-core").UnknownError>>;
    getFullUser(abortController?: AbortController): Promise<import("ts-results").Result<import("@corbado/types").CorbadoUser, import("@corbado/web-core").CorbadoError>>;
}
